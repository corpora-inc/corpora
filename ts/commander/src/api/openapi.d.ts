/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/corpora/corpus": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Corpora
         * @description List all Corpora.
         */
        get: operations["list_corpora"];
        put?: never;
        /**
         * Create Corpus
         * @description Create a new Corpus with an uploaded tarball.
         */
        post: operations["create_corpus"];
        /**
         * Delete Corpus
         * @description Delete a Corpus by name.
         */
        delete: operations["delete_corpus"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/corpora/corpus/chat": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Chat
         * @description Chat with the Corpus.
         */
        post: operations["chat"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/corpora/corpus/{corpus_id}/files": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get File Hashes
         * @description Retrieve a map of file paths to their hashes for a Corpus.
         */
        get: operations["get_file_hashes"];
        put?: never;
        /**
         * Update Files
         * @description Update a Corpus with an uploaded tarball for additions/updates
         *     and a list of files to delete
         */
        post: operations["update_files"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/corpora/corpus/{corpus_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Corpus
         * @description Retrieve a Corpus by ID.
         */
        get: operations["get_corpus"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/corpora/file/corpus/{corpus_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get File By Path
         * @description Retrieve a File by path within a Corpus.
         */
        get: operations["get_file_by_path"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/corpora/file/{file_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get File
         * @description Retrieve a File by ID.
         */
        get: operations["get_file"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/corpora/file": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create File
         * @description Create a new File within a Corpus.
         */
        post: operations["create_file"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/corpora/split/search": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Vector Search
         * @description Perform a vector similarity search for splits using a provided query vector.
         */
        post: operations["vector_search"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/corpora/split/{split_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Split
         * @description Retrieve a Split by ID.
         */
        get: operations["get_split"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/corpora/split/file/{file_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Splits For File
         * @description List all Splits for a specific CorpusTextFile.
         */
        get: operations["list_splits_for_file"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/corpora/plan/issue": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Get Issue */
        post: operations["get_issue"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/corpora/workon/file": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** File */
        post: operations["file"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/corpora/plots/matplotlib": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Get Matplotlib Plot */
        post: operations["get_matplotlib_plot"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/commander/complete": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Text Completion */
        post: operations["corpora_commander_api_onboarding_text_completion"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/commander/lmstudio/models": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * List Lmstudio Models
         * @description Fetch the list of model names from LM Studio.
         */
        post: operations["corpora_commander_api_onboarding_list_lmstudio_models"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/commander/openai/models": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * List Openai Models
         * @description Fetch the list of available OpenAI model IDs.
         *     If `api_key` is provided in the request body, it overrides the
         *     OPENAI_API_KEY environment variable for this call.
         */
        post: operations["corpora_commander_api_onboarding_list_openai_models"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/commander/xai/models": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * List Xai Models
         * @description Fetch the list of available xAI Grok model IDs via GET /v1/models.
         */
        post: operations["corpora_commander_api_onboarding_list_xai_models"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/commander/projects/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Projects
         * @description Return all projects, most recent first.
         */
        get: operations["corpora_commander_api_project_list_projects"];
        put?: never;
        /**
         * Create Project
         * @description Create a new project with the given metadata.
         */
        post: operations["corpora_commander_api_project_create_project"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/commander/projects/{project_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Project
         * @description Retrieve a single project by its ID.
         */
        get: operations["corpora_commander_api_project_get_project"];
        /**
         * Update Project
         * @description Update the given fields on a project.
         */
        put: operations["corpora_commander_api_project_update_project"];
        post?: never;
        /**
         * Delete Project
         * @description Delete a project.
         */
        delete: operations["corpora_commander_api_project_delete_project"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** CorpusResponseSchema */
        CorpusResponseSchema: {
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /** Name */
            name: string;
            /** Url */
            url?: string | null;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /**
             * Updated At
             * Format: date-time
             */
            updated_at: string;
        };
        /** CorpusSchema */
        CorpusSchema: {
            /** Name */
            name: string;
            /** Url */
            url?: string | null;
        };
        /** CorpusChatSchema */
        CorpusChatSchema: {
            /** Corpus Id */
            corpus_id: string;
            /** Messages */
            messages: components["schemas"]["MessageSchema"][];
            /**
             * Voice
             * @default
             */
            voice: string;
            /**
             * Purpose
             * @default
             */
            purpose: string;
            /**
             * Structure
             * @default
             */
            structure: string;
            /**
             * Directions
             * @default
             */
            directions: string;
        };
        /** MessageSchema */
        MessageSchema: {
            /** Role */
            role: string;
            /** Text */
            text: string;
        };
        /** CorpusUpdateFilesSchema */
        CorpusUpdateFilesSchema: {
            /** Delete Files */
            delete_files?: string[] | null;
        };
        /** FileResponseSchema */
        FileResponseSchema: {
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /**
             * Corpus Id
             * Format: uuid
             */
            corpus_id: string;
            /** Path */
            path: string;
            /** Content */
            content: string;
            /** Checksum */
            checksum: string;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /**
             * Updated At
             * Format: date-time
             */
            updated_at: string;
        };
        /** FileSchema */
        FileSchema: {
            /** Path */
            path: string;
            /** Content */
            content: string;
            /**
             * Corpus Id
             * Format: uuid
             */
            corpus_id: string;
        };
        /** SplitResponseSchema */
        SplitResponseSchema: {
            /**
             * Id
             * Format: uuid
             */
            id: string;
            /** Content */
            content: string;
            /** Order */
            order: number;
            /**
             * File Id
             * Format: uuid
             */
            file_id: string;
        };
        /** SplitVectorSearchSchema */
        SplitVectorSearchSchema: {
            /**
             * Corpus Id
             * Format: uuid
             */
            corpus_id: string;
            /** Text */
            text: string;
            /**
             * Limit
             * @default 10
             */
            limit: number;
        };
        /** IssueSchema */
        IssueSchema: {
            /** Title */
            title: string;
            /** Body */
            body: string;
        };
        /** CorpusFileChatSchema */
        CorpusFileChatSchema: {
            /** Corpus Id */
            corpus_id: string;
            /** Messages */
            messages: components["schemas"]["MessageSchema"][];
            /**
             * Voice
             * @default
             */
            voice: string;
            /**
             * Purpose
             * @default
             */
            purpose: string;
            /**
             * Structure
             * @default
             */
            structure: string;
            /**
             * Directions
             * @default
             */
            directions: string;
            /** Path */
            path: string;
        };
        /** PlotResponseSchema */
        PlotResponseSchema: {
            /** Plot */
            plot: string;
        };
        /** CompletionResponse */
        CompletionResponse: {
            /** Text */
            text: string;
        };
        /** ChatMessageSchema */
        ChatMessageSchema: {
            /** Role */
            role: string;
            /** Text */
            text: string;
        };
        /** CompletionRequest */
        CompletionRequest: {
            /**
             * Provider
             * @description one of: openai, xai, local
             */
            provider: string;
            /**
             * Model
             * @description model name to use
             */
            model: string;
            /**
             * Base Url
             * @description only for providers that need a URL (e.g. local)
             */
            base_url?: string | null;
            /**
             * Api Key
             * @description override env var for key-based providers
             */
            api_key?: string | null;
            /** Messages */
            messages: components["schemas"]["ChatMessageSchema"][];
        };
        /** LMStudioPing */
        LMStudioPing: {
            /** Base Url */
            base_url: string;
        };
        /** OpenAIModelsRequest */
        OpenAIModelsRequest: {
            /** Api Key */
            api_key?: string | null;
        };
        /** XAIModelsResponse */
        XAIModelsResponse: {
            /** Models */
            models: string[];
        };
        /** XAIModelsRequest */
        XAIModelsRequest: {
            /**
             * Api Key
             * @description Your xAI API key
             */
            api_key: string;
            /**
             * Base Url
             * @description Base URL for xAI API (defaults to https://api.x.ai)
             * @default https://api.x.ai
             */
            base_url: string | null;
        };
        /** ProjectOut */
        ProjectOut: {
            /** Title */
            title: string;
            /**
             * Subtitle
             * @default
             */
            subtitle: string | null;
            /**
             * Purpose
             * @default
             */
            purpose: string | null;
            /**
             * Author
             * @default
             */
            author: string | null;
            /**
             * Publisher
             * @default
             */
            publisher: string | null;
            /**
             * Isbn
             * @default
             */
            isbn: string | null;
            /**
             * Language
             * @default en-US
             */
            language: string | null;
            /** Publication Date */
            publication_date?: string | null;
            /**
             * Instructions
             * @default
             */
            instructions: string | null;
            /**
             * Voice
             * @default
             */
            voice: string | null;
            /** Id */
            id: number;
            /**
             * Created At
             * Format: date-time
             */
            created_at: string;
            /**
             * Updated At
             * Format: date-time
             */
            updated_at: string;
        };
        /** ProjectIn */
        ProjectIn: {
            /** Title */
            title: string;
            /**
             * Subtitle
             * @default
             */
            subtitle: string | null;
            /**
             * Purpose
             * @default
             */
            purpose: string | null;
            /**
             * Author
             * @default
             */
            author: string | null;
            /**
             * Publisher
             * @default
             */
            publisher: string | null;
            /**
             * Isbn
             * @default
             */
            isbn: string | null;
            /**
             * Language
             * @default en-US
             */
            language: string | null;
            /** Publication Date */
            publication_date?: string | null;
            /**
             * Instructions
             * @default
             */
            instructions: string | null;
            /**
             * Voice
             * @default
             */
            voice: string | null;
        };
        /** ProjectUpdate */
        ProjectUpdate: {
            /** Title */
            title: string | null;
            /** Subtitle */
            subtitle: string | null;
            /** Purpose */
            purpose: string | null;
            /** Author */
            author: string | null;
            /** Publisher */
            publisher: string | null;
            /** Isbn */
            isbn: string | null;
            /** Language */
            language: string | null;
            /** Publication Date */
            publication_date: string | null;
            /** Instructions */
            instructions: string | null;
            /** Voice */
            voice: string | null;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    list_corpora: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CorpusResponseSchema"][];
                };
            };
        };
    };
    create_corpus: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": {
                    /** Name */
                    name: string;
                    /** Url */
                    url?: string | null;
                    /**
                     * Tarball
                     * Format: binary
                     */
                    tarball: string;
                };
            };
        };
        responses: {
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CorpusResponseSchema"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            /** @description Conflict */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
        };
    };
    delete_corpus: {
        parameters: {
            query: {
                corpus_name: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No Content */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
        };
    };
    chat: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CorpusChatSchema"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
        };
    };
    get_file_hashes: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                corpus_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        [key: string]: string;
                    };
                };
            };
        };
    };
    update_files: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                corpus_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": {
                    /** Delete Files */
                    delete_files?: string[] | null;
                    /**
                     * Tarball
                     * Format: binary
                     */
                    tarball: string;
                };
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
        };
    };
    get_corpus: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                corpus_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CorpusResponseSchema"];
                };
            };
        };
    };
    get_file_by_path: {
        parameters: {
            query: {
                /** @description Path to the file */
                path: string;
            };
            header?: never;
            path: {
                corpus_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FileResponseSchema"];
                };
            };
        };
    };
    get_file: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                file_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FileResponseSchema"];
                };
            };
        };
    };
    create_file: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["FileSchema"];
            };
        };
        responses: {
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FileResponseSchema"];
                };
            };
            /** @description Conflict */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
        };
    };
    vector_search: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SplitVectorSearchSchema"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SplitResponseSchema"][];
                };
            };
        };
    };
    get_split: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                split_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SplitResponseSchema"];
                };
            };
        };
    };
    list_splits_for_file: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                file_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SplitResponseSchema"][];
                };
            };
        };
    };
    get_issue: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CorpusChatSchema"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["IssueSchema"];
                };
            };
        };
    };
    file: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CorpusFileChatSchema"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": string;
                };
            };
        };
    };
    get_matplotlib_plot: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CorpusChatSchema"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PlotResponseSchema"];
                };
            };
        };
    };
    corpora_commander_api_onboarding_text_completion: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CompletionRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CompletionResponse"];
                };
            };
        };
    };
    corpora_commander_api_onboarding_list_lmstudio_models: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["LMStudioPing"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    corpora_commander_api_onboarding_list_openai_models: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["OpenAIModelsRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    corpora_commander_api_onboarding_list_xai_models: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["XAIModelsRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["XAIModelsResponse"];
                };
            };
        };
    };
    corpora_commander_api_project_list_projects: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProjectOut"][];
                };
            };
        };
    };
    corpora_commander_api_project_create_project: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ProjectIn"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProjectOut"];
                };
            };
        };
    };
    corpora_commander_api_project_get_project: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                project_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProjectOut"];
                };
            };
        };
    };
    corpora_commander_api_project_update_project: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                project_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ProjectUpdate"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProjectOut"];
                };
            };
        };
    };
    corpora_commander_api_project_delete_project: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                project_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
}
