/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * Corpora API
 * API for managing and processing corpora
 * OpenAPI spec version: 0.1.0
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";

import * as axios from "axios";
import type { AxiosError, AxiosRequestConfig, AxiosResponse } from "axios";

import type {
  CorpusChatSchema,
  CorpusResponseSchema,
  CreateCorpusBody,
  DeleteCorpusParams,
  GetFileHashes200,
  UpdateFilesBody,
} from ".././schemas";

/**
 * Create a new Corpus with an uploaded tarball.
 * @summary Create Corpus
 */
export const createCorpus = (
  createCorpusBody: CreateCorpusBody,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<CorpusResponseSchema>> => {
  const formData = new FormData();
  formData.append(`name`, createCorpusBody.name);
  if (createCorpusBody.url !== undefined && createCorpusBody.url !== null) {
    formData.append(`url`, createCorpusBody.url);
  }
  formData.append(`tarball`, createCorpusBody.tarball);

  return axios.default.post(`/api/corpora/corpus`, formData, options);
};

export const getCreateCorpusMutationOptions = <
  TError = AxiosError<string>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createCorpus>>,
    TError,
    { data: CreateCorpusBody },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof createCorpus>>,
  TError,
  { data: CreateCorpusBody },
  TContext
> => {
  const mutationKey = ["createCorpus"];
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof createCorpus>>,
    { data: CreateCorpusBody }
  > = (props) => {
    const { data } = props ?? {};

    return createCorpus(data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type CreateCorpusMutationResult = NonNullable<
  Awaited<ReturnType<typeof createCorpus>>
>;
export type CreateCorpusMutationBody = CreateCorpusBody;
export type CreateCorpusMutationError = AxiosError<string>;

/**
 * @summary Create Corpus
 */
export const useCreateCorpus = <
  TError = AxiosError<string>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof createCorpus>>,
      TError,
      { data: CreateCorpusBody },
      TContext
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof createCorpus>>,
  TError,
  { data: CreateCorpusBody },
  TContext
> => {
  const mutationOptions = getCreateCorpusMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * Delete a Corpus by name.
 * @summary Delete Corpus
 */
export const deleteCorpus = (
  params: DeleteCorpusParams,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<string>> => {
  return axios.default.delete(`/api/corpora/corpus`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

export const getDeleteCorpusMutationOptions = <
  TError = AxiosError<string>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteCorpus>>,
    TError,
    { params: DeleteCorpusParams },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteCorpus>>,
  TError,
  { params: DeleteCorpusParams },
  TContext
> => {
  const mutationKey = ["deleteCorpus"];
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteCorpus>>,
    { params: DeleteCorpusParams }
  > = (props) => {
    const { params } = props ?? {};

    return deleteCorpus(params, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteCorpusMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteCorpus>>
>;

export type DeleteCorpusMutationError = AxiosError<string>;

/**
 * @summary Delete Corpus
 */
export const useDeleteCorpus = <
  TError = AxiosError<string>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof deleteCorpus>>,
      TError,
      { params: DeleteCorpusParams },
      TContext
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof deleteCorpus>>,
  TError,
  { params: DeleteCorpusParams },
  TContext
> => {
  const mutationOptions = getDeleteCorpusMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * List all Corpora.
 * @summary List Corpora
 */
export const listCorpora = (
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<CorpusResponseSchema[]>> => {
  return axios.default.get(`/api/corpora/corpus`, options);
};

export const getListCorporaQueryKey = () => {
  return [`/api/corpora/corpus`] as const;
};

export const getListCorporaQueryOptions = <
  TData = Awaited<ReturnType<typeof listCorpora>>,
  TError = AxiosError<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<Awaited<ReturnType<typeof listCorpora>>, TError, TData>
  >;
  axios?: AxiosRequestConfig;
}) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getListCorporaQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof listCorpora>>> = ({
    signal,
  }) => listCorpora({ signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof listCorpora>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type ListCorporaQueryResult = NonNullable<
  Awaited<ReturnType<typeof listCorpora>>
>;
export type ListCorporaQueryError = AxiosError<unknown>;

export function useListCorpora<
  TData = Awaited<ReturnType<typeof listCorpora>>,
  TError = AxiosError<unknown>,
>(
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof listCorpora>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof listCorpora>>,
          TError,
          Awaited<ReturnType<typeof listCorpora>>
        >,
        "initialData"
      >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useListCorpora<
  TData = Awaited<ReturnType<typeof listCorpora>>,
  TError = AxiosError<unknown>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof listCorpora>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof listCorpora>>,
          TError,
          Awaited<ReturnType<typeof listCorpora>>
        >,
        "initialData"
      >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useListCorpora<
  TData = Awaited<ReturnType<typeof listCorpora>>,
  TError = AxiosError<unknown>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof listCorpora>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary List Corpora
 */

export function useListCorpora<
  TData = Awaited<ReturnType<typeof listCorpora>>,
  TError = AxiosError<unknown>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof listCorpora>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getListCorporaQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Chat with the Corpus.
 * @summary Chat
 */
export const chat = (
  corpusChatSchema: CorpusChatSchema,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<string>> => {
  return axios.default.post(
    `/api/corpora/corpus/chat`,
    corpusChatSchema,
    options,
  );
};

export const getChatMutationOptions = <
  TError = AxiosError<string>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof chat>>,
    TError,
    { data: CorpusChatSchema },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof chat>>,
  TError,
  { data: CorpusChatSchema },
  TContext
> => {
  const mutationKey = ["chat"];
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof chat>>,
    { data: CorpusChatSchema }
  > = (props) => {
    const { data } = props ?? {};

    return chat(data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type ChatMutationResult = NonNullable<Awaited<ReturnType<typeof chat>>>;
export type ChatMutationBody = CorpusChatSchema;
export type ChatMutationError = AxiosError<string>;

/**
 * @summary Chat
 */
export const useChat = <TError = AxiosError<string>, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof chat>>,
      TError,
      { data: CorpusChatSchema },
      TContext
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof chat>>,
  TError,
  { data: CorpusChatSchema },
  TContext
> => {
  const mutationOptions = getChatMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * Update a Corpus with an uploaded tarball for additions/updates
and a list of files to delete
 * @summary Update Files
 */
export const updateFiles = (
  corpusId: string,
  updateFilesBody: UpdateFilesBody,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<string>> => {
  const formData = new FormData();
  if (
    updateFilesBody.delete_files !== undefined &&
    updateFilesBody.delete_files !== null
  ) {
    formData.append(`delete_files`, updateFilesBody.delete_files);
  }
  formData.append(`tarball`, updateFilesBody.tarball);

  return axios.default.post(
    `/api/corpora/corpus/${corpusId}/files`,
    formData,
    options,
  );
};

export const getUpdateFilesMutationOptions = <
  TError = AxiosError<string>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateFiles>>,
    TError,
    { corpusId: string; data: UpdateFilesBody },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof updateFiles>>,
  TError,
  { corpusId: string; data: UpdateFilesBody },
  TContext
> => {
  const mutationKey = ["updateFiles"];
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updateFiles>>,
    { corpusId: string; data: UpdateFilesBody }
  > = (props) => {
    const { corpusId, data } = props ?? {};

    return updateFiles(corpusId, data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type UpdateFilesMutationResult = NonNullable<
  Awaited<ReturnType<typeof updateFiles>>
>;
export type UpdateFilesMutationBody = UpdateFilesBody;
export type UpdateFilesMutationError = AxiosError<string>;

/**
 * @summary Update Files
 */
export const useUpdateFiles = <
  TError = AxiosError<string>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof updateFiles>>,
      TError,
      { corpusId: string; data: UpdateFilesBody },
      TContext
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof updateFiles>>,
  TError,
  { corpusId: string; data: UpdateFilesBody },
  TContext
> => {
  const mutationOptions = getUpdateFilesMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * Retrieve a map of file paths to their hashes for a Corpus.
 * @summary Get File Hashes
 */
export const getFileHashes = (
  corpusId: string,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<GetFileHashes200>> => {
  return axios.default.get(`/api/corpora/corpus/${corpusId}/files`, options);
};

export const getGetFileHashesQueryKey = (corpusId: string) => {
  return [`/api/corpora/corpus/${corpusId}/files`] as const;
};

export const getGetFileHashesQueryOptions = <
  TData = Awaited<ReturnType<typeof getFileHashes>>,
  TError = AxiosError<unknown>,
>(
  corpusId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getFileHashes>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
  },
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetFileHashesQueryKey(corpusId);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getFileHashes>>> = ({
    signal,
  }) => getFileHashes(corpusId, { signal, ...axiosOptions });

  return {
    queryKey,
    queryFn,
    enabled: !!corpusId,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getFileHashes>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetFileHashesQueryResult = NonNullable<
  Awaited<ReturnType<typeof getFileHashes>>
>;
export type GetFileHashesQueryError = AxiosError<unknown>;

export function useGetFileHashes<
  TData = Awaited<ReturnType<typeof getFileHashes>>,
  TError = AxiosError<unknown>,
>(
  corpusId: string,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getFileHashes>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getFileHashes>>,
          TError,
          Awaited<ReturnType<typeof getFileHashes>>
        >,
        "initialData"
      >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetFileHashes<
  TData = Awaited<ReturnType<typeof getFileHashes>>,
  TError = AxiosError<unknown>,
>(
  corpusId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getFileHashes>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getFileHashes>>,
          TError,
          Awaited<ReturnType<typeof getFileHashes>>
        >,
        "initialData"
      >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetFileHashes<
  TData = Awaited<ReturnType<typeof getFileHashes>>,
  TError = AxiosError<unknown>,
>(
  corpusId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getFileHashes>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get File Hashes
 */

export function useGetFileHashes<
  TData = Awaited<ReturnType<typeof getFileHashes>>,
  TError = AxiosError<unknown>,
>(
  corpusId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getFileHashes>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetFileHashesQueryOptions(corpusId, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Retrieve a Corpus by ID.
 * @summary Get Corpus
 */
export const getCorpus = (
  corpusId: string,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<CorpusResponseSchema>> => {
  return axios.default.get(`/api/corpora/corpus/${corpusId}`, options);
};

export const getGetCorpusQueryKey = (corpusId: string) => {
  return [`/api/corpora/corpus/${corpusId}`] as const;
};

export const getGetCorpusQueryOptions = <
  TData = Awaited<ReturnType<typeof getCorpus>>,
  TError = AxiosError<unknown>,
>(
  corpusId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getCorpus>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
  },
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetCorpusQueryKey(corpusId);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getCorpus>>> = ({
    signal,
  }) => getCorpus(corpusId, { signal, ...axiosOptions });

  return {
    queryKey,
    queryFn,
    enabled: !!corpusId,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getCorpus>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetCorpusQueryResult = NonNullable<
  Awaited<ReturnType<typeof getCorpus>>
>;
export type GetCorpusQueryError = AxiosError<unknown>;

export function useGetCorpus<
  TData = Awaited<ReturnType<typeof getCorpus>>,
  TError = AxiosError<unknown>,
>(
  corpusId: string,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getCorpus>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCorpus>>,
          TError,
          Awaited<ReturnType<typeof getCorpus>>
        >,
        "initialData"
      >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetCorpus<
  TData = Awaited<ReturnType<typeof getCorpus>>,
  TError = AxiosError<unknown>,
>(
  corpusId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getCorpus>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCorpus>>,
          TError,
          Awaited<ReturnType<typeof getCorpus>>
        >,
        "initialData"
      >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetCorpus<
  TData = Awaited<ReturnType<typeof getCorpus>>,
  TError = AxiosError<unknown>,
>(
  corpusId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getCorpus>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get Corpus
 */

export function useGetCorpus<
  TData = Awaited<ReturnType<typeof getCorpus>>,
  TError = AxiosError<unknown>,
>(
  corpusId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getCorpus>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetCorpusQueryOptions(corpusId, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}
