/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * Corpora API
 * API for managing and processing corpora
 * OpenAPI spec version: 0.1.0
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";

import * as axios from "axios";
import type { AxiosError, AxiosRequestConfig, AxiosResponse } from "axios";

import type {
  FileResponseSchema,
  FileSchema,
  GetFileByPathParams,
} from ".././schemas";

/**
 * Retrieve a File by path within a Corpus.
 * @summary Get File By Path
 */
export const getFileByPath = (
  corpusId: string,
  params: GetFileByPathParams,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<FileResponseSchema>> => {
  return axios.default.get(`/api/corpora/file/corpus/${corpusId}`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

export const getGetFileByPathQueryKey = (
  corpusId: string,
  params: GetFileByPathParams,
) => {
  return [
    `/api/corpora/file/corpus/${corpusId}`,
    ...(params ? [params] : []),
  ] as const;
};

export const getGetFileByPathQueryOptions = <
  TData = Awaited<ReturnType<typeof getFileByPath>>,
  TError = AxiosError<unknown>,
>(
  corpusId: string,
  params: GetFileByPathParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getFileByPath>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
  },
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetFileByPathQueryKey(corpusId, params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getFileByPath>>> = ({
    signal,
  }) => getFileByPath(corpusId, params, { signal, ...axiosOptions });

  return {
    queryKey,
    queryFn,
    enabled: !!corpusId,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getFileByPath>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type GetFileByPathQueryResult = NonNullable<
  Awaited<ReturnType<typeof getFileByPath>>
>;
export type GetFileByPathQueryError = AxiosError<unknown>;

export function useGetFileByPath<
  TData = Awaited<ReturnType<typeof getFileByPath>>,
  TError = AxiosError<unknown>,
>(
  corpusId: string,
  params: GetFileByPathParams,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getFileByPath>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getFileByPath>>,
          TError,
          Awaited<ReturnType<typeof getFileByPath>>
        >,
        "initialData"
      >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetFileByPath<
  TData = Awaited<ReturnType<typeof getFileByPath>>,
  TError = AxiosError<unknown>,
>(
  corpusId: string,
  params: GetFileByPathParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getFileByPath>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getFileByPath>>,
          TError,
          Awaited<ReturnType<typeof getFileByPath>>
        >,
        "initialData"
      >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetFileByPath<
  TData = Awaited<ReturnType<typeof getFileByPath>>,
  TError = AxiosError<unknown>,
>(
  corpusId: string,
  params: GetFileByPathParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getFileByPath>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get File By Path
 */

export function useGetFileByPath<
  TData = Awaited<ReturnType<typeof getFileByPath>>,
  TError = AxiosError<unknown>,
>(
  corpusId: string,
  params: GetFileByPathParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getFileByPath>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetFileByPathQueryOptions(corpusId, params, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Retrieve a File by ID.
 * @summary Get File
 */
export const getFile = (
  fileId: string,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<FileResponseSchema>> => {
  return axios.default.get(`/api/corpora/file/${fileId}`, options);
};

export const getGetFileQueryKey = (fileId: string) => {
  return [`/api/corpora/file/${fileId}`] as const;
};

export const getGetFileQueryOptions = <
  TData = Awaited<ReturnType<typeof getFile>>,
  TError = AxiosError<unknown>,
>(
  fileId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getFile>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
  },
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetFileQueryKey(fileId);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getFile>>> = ({
    signal,
  }) => getFile(fileId, { signal, ...axiosOptions });

  return {
    queryKey,
    queryFn,
    enabled: !!fileId,
    ...queryOptions,
  } as UseQueryOptions<Awaited<ReturnType<typeof getFile>>, TError, TData> & {
    queryKey: DataTag<QueryKey, TData, TError>;
  };
};

export type GetFileQueryResult = NonNullable<
  Awaited<ReturnType<typeof getFile>>
>;
export type GetFileQueryError = AxiosError<unknown>;

export function useGetFile<
  TData = Awaited<ReturnType<typeof getFile>>,
  TError = AxiosError<unknown>,
>(
  fileId: string,
  options: {
    query: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getFile>>, TError, TData>
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getFile>>,
          TError,
          Awaited<ReturnType<typeof getFile>>
        >,
        "initialData"
      >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetFile<
  TData = Awaited<ReturnType<typeof getFile>>,
  TError = AxiosError<unknown>,
>(
  fileId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getFile>>, TError, TData>
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getFile>>,
          TError,
          Awaited<ReturnType<typeof getFile>>
        >,
        "initialData"
      >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useGetFile<
  TData = Awaited<ReturnType<typeof getFile>>,
  TError = AxiosError<unknown>,
>(
  fileId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getFile>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get File
 */

export function useGetFile<
  TData = Awaited<ReturnType<typeof getFile>>,
  TError = AxiosError<unknown>,
>(
  fileId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getFile>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getGetFileQueryOptions(fileId, options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Create a new File within a Corpus.
 * @summary Create File
 */
export const createFile = (
  fileSchema: FileSchema,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<FileResponseSchema>> => {
  return axios.default.post(`/api/corpora/file`, fileSchema, options);
};

export const getCreateFileMutationOptions = <
  TError = AxiosError<string>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createFile>>,
    TError,
    { data: FileSchema },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof createFile>>,
  TError,
  { data: FileSchema },
  TContext
> => {
  const mutationKey = ["createFile"];
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof createFile>>,
    { data: FileSchema }
  > = (props) => {
    const { data } = props ?? {};

    return createFile(data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type CreateFileMutationResult = NonNullable<
  Awaited<ReturnType<typeof createFile>>
>;
export type CreateFileMutationBody = FileSchema;
export type CreateFileMutationError = AxiosError<string>;

/**
 * @summary Create File
 */
export const useCreateFile = <TError = AxiosError<string>, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof createFile>>,
      TError,
      { data: FileSchema },
      TContext
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof createFile>>,
  TError,
  { data: FileSchema },
  TContext
> => {
  const mutationOptions = getCreateFileMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
