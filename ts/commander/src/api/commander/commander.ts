/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * Corpora API
 * API for managing and processing corpora
 * OpenAPI spec version: 0.1.0
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";

import * as axios from "axios";
import type { AxiosError, AxiosRequestConfig, AxiosResponse } from "axios";

import type {
  CompletionRequest,
  CompletionResponse,
  CorporaCommanderApiImagesCreateImageBody,
  CorporaCommanderApiLlmGenericDataCompletion200,
  DraftBookRequest,
  DraftBookResponse,
  GenericCompletionRequest,
  ImageToken,
  LMStudioPing,
  OpenAIModelsRequest,
  OutlineRequest,
  OutlineResponse,
  ProjectImageOut,
  ProjectImageUpdate,
  ProjectIn,
  ProjectOut,
  ProjectUpdate,
  RewriteRequest,
  RewriteSection,
  RewriteSubsection,
  SectionIn,
  SectionOut,
  SectionUpdate,
  SectionWithSubsections,
  SubsectionIn,
  SubsectionOut,
  SubsectionUpdate,
  XAIModelsRequest,
  XAIModelsResponse,
} from ".././schemas";

import { createFormData } from ".././mutator/formData";

/**
 * @summary Text Completion
 */
export const corporaCommanderApiOnboardingTextCompletion = (
  completionRequest: CompletionRequest,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<CompletionResponse>> => {
  return axios.default.post(
    `/api/commander/complete`,
    completionRequest,
    options,
  );
};

export const getCorporaCommanderApiOnboardingTextCompletionMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof corporaCommanderApiOnboardingTextCompletion>>,
    TError,
    { data: CompletionRequest },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof corporaCommanderApiOnboardingTextCompletion>>,
  TError,
  { data: CompletionRequest },
  TContext
> => {
  const mutationKey = ["corporaCommanderApiOnboardingTextCompletion"];
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof corporaCommanderApiOnboardingTextCompletion>>,
    { data: CompletionRequest }
  > = (props) => {
    const { data } = props ?? {};

    return corporaCommanderApiOnboardingTextCompletion(data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type CorporaCommanderApiOnboardingTextCompletionMutationResult =
  NonNullable<
    Awaited<ReturnType<typeof corporaCommanderApiOnboardingTextCompletion>>
  >;
export type CorporaCommanderApiOnboardingTextCompletionMutationBody =
  CompletionRequest;
export type CorporaCommanderApiOnboardingTextCompletionMutationError =
  AxiosError<unknown>;

/**
 * @summary Text Completion
 */
export const useCorporaCommanderApiOnboardingTextCompletion = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof corporaCommanderApiOnboardingTextCompletion>>,
      TError,
      { data: CompletionRequest },
      TContext
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof corporaCommanderApiOnboardingTextCompletion>>,
  TError,
  { data: CompletionRequest },
  TContext
> => {
  const mutationOptions =
    getCorporaCommanderApiOnboardingTextCompletionMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * Fetch the list of model names from LM Studio.
 * @summary List Lmstudio Models
 */
export const corporaCommanderApiOnboardingListLmstudioModels = (
  lMStudioPing: LMStudioPing,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<void>> => {
  return axios.default.post(
    `/api/commander/lmstudio/models`,
    lMStudioPing,
    options,
  );
};

export const getCorporaCommanderApiOnboardingListLmstudioModelsMutationOptions =
  <TError = AxiosError<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
      Awaited<
        ReturnType<typeof corporaCommanderApiOnboardingListLmstudioModels>
      >,
      TError,
      { data: LMStudioPing },
      TContext
    >;
    axios?: AxiosRequestConfig;
  }): UseMutationOptions<
    Awaited<
      ReturnType<typeof corporaCommanderApiOnboardingListLmstudioModels>
    >,
    TError,
    { data: LMStudioPing },
    TContext
  > => {
    const mutationKey = ["corporaCommanderApiOnboardingListLmstudioModels"];
    const { mutation: mutationOptions, axios: axiosOptions } = options
      ? options.mutation &&
        "mutationKey" in options.mutation &&
        options.mutation.mutationKey
        ? options
        : { ...options, mutation: { ...options.mutation, mutationKey } }
      : { mutation: { mutationKey }, axios: undefined };

    const mutationFn: MutationFunction<
      Awaited<
        ReturnType<typeof corporaCommanderApiOnboardingListLmstudioModels>
      >,
      { data: LMStudioPing }
    > = (props) => {
      const { data } = props ?? {};

      return corporaCommanderApiOnboardingListLmstudioModels(
        data,
        axiosOptions,
      );
    };

    return { mutationFn, ...mutationOptions };
  };

export type CorporaCommanderApiOnboardingListLmstudioModelsMutationResult =
  NonNullable<
    Awaited<ReturnType<typeof corporaCommanderApiOnboardingListLmstudioModels>>
  >;
export type CorporaCommanderApiOnboardingListLmstudioModelsMutationBody =
  LMStudioPing;
export type CorporaCommanderApiOnboardingListLmstudioModelsMutationError =
  AxiosError<unknown>;

/**
 * @summary List Lmstudio Models
 */
export const useCorporaCommanderApiOnboardingListLmstudioModels = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<
        ReturnType<typeof corporaCommanderApiOnboardingListLmstudioModels>
      >,
      TError,
      { data: LMStudioPing },
      TContext
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof corporaCommanderApiOnboardingListLmstudioModels>>,
  TError,
  { data: LMStudioPing },
  TContext
> => {
  const mutationOptions =
    getCorporaCommanderApiOnboardingListLmstudioModelsMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * Fetch the list of available OpenAI model IDs.
If `api_key` is provided in the request body, it overrides the
OPENAI_API_KEY environment variable for this call.
 * @summary List Openai Models
 */
export const corporaCommanderApiOnboardingListOpenaiModels = (
  openAIModelsRequest: OpenAIModelsRequest,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<void>> => {
  return axios.default.post(
    `/api/commander/openai/models`,
    openAIModelsRequest,
    options,
  );
};

export const getCorporaCommanderApiOnboardingListOpenaiModelsMutationOptions =
  <TError = AxiosError<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
      Awaited<
        ReturnType<typeof corporaCommanderApiOnboardingListOpenaiModels>
      >,
      TError,
      { data: OpenAIModelsRequest },
      TContext
    >;
    axios?: AxiosRequestConfig;
  }): UseMutationOptions<
    Awaited<ReturnType<typeof corporaCommanderApiOnboardingListOpenaiModels>>,
    TError,
    { data: OpenAIModelsRequest },
    TContext
  > => {
    const mutationKey = ["corporaCommanderApiOnboardingListOpenaiModels"];
    const { mutation: mutationOptions, axios: axiosOptions } = options
      ? options.mutation &&
        "mutationKey" in options.mutation &&
        options.mutation.mutationKey
        ? options
        : { ...options, mutation: { ...options.mutation, mutationKey } }
      : { mutation: { mutationKey }, axios: undefined };

    const mutationFn: MutationFunction<
      Awaited<
        ReturnType<typeof corporaCommanderApiOnboardingListOpenaiModels>
      >,
      { data: OpenAIModelsRequest }
    > = (props) => {
      const { data } = props ?? {};

      return corporaCommanderApiOnboardingListOpenaiModels(data, axiosOptions);
    };

    return { mutationFn, ...mutationOptions };
  };

export type CorporaCommanderApiOnboardingListOpenaiModelsMutationResult =
  NonNullable<
    Awaited<ReturnType<typeof corporaCommanderApiOnboardingListOpenaiModels>>
  >;
export type CorporaCommanderApiOnboardingListOpenaiModelsMutationBody =
  OpenAIModelsRequest;
export type CorporaCommanderApiOnboardingListOpenaiModelsMutationError =
  AxiosError<unknown>;

/**
 * @summary List Openai Models
 */
export const useCorporaCommanderApiOnboardingListOpenaiModels = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<
        ReturnType<typeof corporaCommanderApiOnboardingListOpenaiModels>
      >,
      TError,
      { data: OpenAIModelsRequest },
      TContext
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof corporaCommanderApiOnboardingListOpenaiModels>>,
  TError,
  { data: OpenAIModelsRequest },
  TContext
> => {
  const mutationOptions =
    getCorporaCommanderApiOnboardingListOpenaiModelsMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * Fetch the list of available xAI Grok model IDs via GET /v1/models.
 * @summary List Xai Models
 */
export const corporaCommanderApiOnboardingListXaiModels = (
  xAIModelsRequest: XAIModelsRequest,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<XAIModelsResponse>> => {
  return axios.default.post(
    `/api/commander/xai/models`,
    xAIModelsRequest,
    options,
  );
};

export const getCorporaCommanderApiOnboardingListXaiModelsMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof corporaCommanderApiOnboardingListXaiModels>>,
    TError,
    { data: XAIModelsRequest },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof corporaCommanderApiOnboardingListXaiModels>>,
  TError,
  { data: XAIModelsRequest },
  TContext
> => {
  const mutationKey = ["corporaCommanderApiOnboardingListXaiModels"];
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof corporaCommanderApiOnboardingListXaiModels>>,
    { data: XAIModelsRequest }
  > = (props) => {
    const { data } = props ?? {};

    return corporaCommanderApiOnboardingListXaiModels(data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type CorporaCommanderApiOnboardingListXaiModelsMutationResult =
  NonNullable<
    Awaited<ReturnType<typeof corporaCommanderApiOnboardingListXaiModels>>
  >;
export type CorporaCommanderApiOnboardingListXaiModelsMutationBody =
  XAIModelsRequest;
export type CorporaCommanderApiOnboardingListXaiModelsMutationError =
  AxiosError<unknown>;

/**
 * @summary List Xai Models
 */
export const useCorporaCommanderApiOnboardingListXaiModels = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof corporaCommanderApiOnboardingListXaiModels>>,
      TError,
      { data: XAIModelsRequest },
      TContext
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof corporaCommanderApiOnboardingListXaiModels>>,
  TError,
  { data: XAIModelsRequest },
  TContext
> => {
  const mutationOptions =
    getCorporaCommanderApiOnboardingListXaiModelsMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * Return all projects, most recent first.
 * @summary List Projects
 */
export const corporaCommanderApiProjectListProjects = (
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<ProjectOut[]>> => {
  return axios.default.get(`/api/commander/projects/`, options);
};

export const getCorporaCommanderApiProjectListProjectsQueryKey = () => {
  return [`/api/commander/projects/`] as const;
};

export const getCorporaCommanderApiProjectListProjectsQueryOptions = <
  TData = Awaited<ReturnType<typeof corporaCommanderApiProjectListProjects>>,
  TError = AxiosError<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof corporaCommanderApiProjectListProjects>>,
      TError,
      TData
    >
  >;
  axios?: AxiosRequestConfig;
}) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getCorporaCommanderApiProjectListProjectsQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof corporaCommanderApiProjectListProjects>>
  > = ({ signal }) =>
    corporaCommanderApiProjectListProjects({ signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof corporaCommanderApiProjectListProjects>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type CorporaCommanderApiProjectListProjectsQueryResult = NonNullable<
  Awaited<ReturnType<typeof corporaCommanderApiProjectListProjects>>
>;
export type CorporaCommanderApiProjectListProjectsQueryError =
  AxiosError<unknown>;

export function useCorporaCommanderApiProjectListProjects<
  TData = Awaited<ReturnType<typeof corporaCommanderApiProjectListProjects>>,
  TError = AxiosError<unknown>,
>(
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof corporaCommanderApiProjectListProjects>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof corporaCommanderApiProjectListProjects>>,
          TError,
          Awaited<ReturnType<typeof corporaCommanderApiProjectListProjects>>
        >,
        "initialData"
      >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useCorporaCommanderApiProjectListProjects<
  TData = Awaited<ReturnType<typeof corporaCommanderApiProjectListProjects>>,
  TError = AxiosError<unknown>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof corporaCommanderApiProjectListProjects>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof corporaCommanderApiProjectListProjects>>,
          TError,
          Awaited<ReturnType<typeof corporaCommanderApiProjectListProjects>>
        >,
        "initialData"
      >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useCorporaCommanderApiProjectListProjects<
  TData = Awaited<ReturnType<typeof corporaCommanderApiProjectListProjects>>,
  TError = AxiosError<unknown>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof corporaCommanderApiProjectListProjects>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary List Projects
 */

export function useCorporaCommanderApiProjectListProjects<
  TData = Awaited<ReturnType<typeof corporaCommanderApiProjectListProjects>>,
  TError = AxiosError<unknown>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof corporaCommanderApiProjectListProjects>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions =
    getCorporaCommanderApiProjectListProjectsQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Create a new project with the given metadata.
 * @summary Create Project
 */
export const corporaCommanderApiProjectCreateProject = (
  projectIn: ProjectIn,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<ProjectOut>> => {
  return axios.default.post(`/api/commander/projects/`, projectIn, options);
};

export const getCorporaCommanderApiProjectCreateProjectMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof corporaCommanderApiProjectCreateProject>>,
    TError,
    { data: ProjectIn },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof corporaCommanderApiProjectCreateProject>>,
  TError,
  { data: ProjectIn },
  TContext
> => {
  const mutationKey = ["corporaCommanderApiProjectCreateProject"];
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof corporaCommanderApiProjectCreateProject>>,
    { data: ProjectIn }
  > = (props) => {
    const { data } = props ?? {};

    return corporaCommanderApiProjectCreateProject(data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type CorporaCommanderApiProjectCreateProjectMutationResult =
  NonNullable<
    Awaited<ReturnType<typeof corporaCommanderApiProjectCreateProject>>
  >;
export type CorporaCommanderApiProjectCreateProjectMutationBody = ProjectIn;
export type CorporaCommanderApiProjectCreateProjectMutationError =
  AxiosError<unknown>;

/**
 * @summary Create Project
 */
export const useCorporaCommanderApiProjectCreateProject = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof corporaCommanderApiProjectCreateProject>>,
      TError,
      { data: ProjectIn },
      TContext
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof corporaCommanderApiProjectCreateProject>>,
  TError,
  { data: ProjectIn },
  TContext
> => {
  const mutationOptions =
    getCorporaCommanderApiProjectCreateProjectMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * Retrieve a single project by its ID.
 * @summary Get Project
 */
export const corporaCommanderApiProjectGetProject = (
  projectId: string,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<ProjectOut>> => {
  return axios.default.get(`/api/commander/projects/${projectId}`, options);
};

export const getCorporaCommanderApiProjectGetProjectQueryKey = (
  projectId: string,
) => {
  return [`/api/commander/projects/${projectId}`] as const;
};

export const getCorporaCommanderApiProjectGetProjectQueryOptions = <
  TData = Awaited<ReturnType<typeof corporaCommanderApiProjectGetProject>>,
  TError = AxiosError<unknown>,
>(
  projectId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof corporaCommanderApiProjectGetProject>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getCorporaCommanderApiProjectGetProjectQueryKey(projectId);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof corporaCommanderApiProjectGetProject>>
  > = ({ signal }) =>
    corporaCommanderApiProjectGetProject(projectId, {
      signal,
      ...axiosOptions,
    });

  return {
    queryKey,
    queryFn,
    enabled: !!projectId,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof corporaCommanderApiProjectGetProject>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type CorporaCommanderApiProjectGetProjectQueryResult = NonNullable<
  Awaited<ReturnType<typeof corporaCommanderApiProjectGetProject>>
>;
export type CorporaCommanderApiProjectGetProjectQueryError =
  AxiosError<unknown>;

export function useCorporaCommanderApiProjectGetProject<
  TData = Awaited<ReturnType<typeof corporaCommanderApiProjectGetProject>>,
  TError = AxiosError<unknown>,
>(
  projectId: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof corporaCommanderApiProjectGetProject>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof corporaCommanderApiProjectGetProject>>,
          TError,
          Awaited<ReturnType<typeof corporaCommanderApiProjectGetProject>>
        >,
        "initialData"
      >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useCorporaCommanderApiProjectGetProject<
  TData = Awaited<ReturnType<typeof corporaCommanderApiProjectGetProject>>,
  TError = AxiosError<unknown>,
>(
  projectId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof corporaCommanderApiProjectGetProject>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof corporaCommanderApiProjectGetProject>>,
          TError,
          Awaited<ReturnType<typeof corporaCommanderApiProjectGetProject>>
        >,
        "initialData"
      >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useCorporaCommanderApiProjectGetProject<
  TData = Awaited<ReturnType<typeof corporaCommanderApiProjectGetProject>>,
  TError = AxiosError<unknown>,
>(
  projectId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof corporaCommanderApiProjectGetProject>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get Project
 */

export function useCorporaCommanderApiProjectGetProject<
  TData = Awaited<ReturnType<typeof corporaCommanderApiProjectGetProject>>,
  TError = AxiosError<unknown>,
>(
  projectId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof corporaCommanderApiProjectGetProject>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getCorporaCommanderApiProjectGetProjectQueryOptions(
    projectId,
    options,
  );

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Update Project
 */
export const corporaCommanderApiProjectUpdateProject = (
  projectId: string,
  projectUpdate: ProjectUpdate,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<ProjectOut>> => {
  return axios.default.put(
    `/api/commander/projects/${projectId}`,
    projectUpdate,
    options,
  );
};

export const getCorporaCommanderApiProjectUpdateProjectMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof corporaCommanderApiProjectUpdateProject>>,
    TError,
    { projectId: string; data: ProjectUpdate },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof corporaCommanderApiProjectUpdateProject>>,
  TError,
  { projectId: string; data: ProjectUpdate },
  TContext
> => {
  const mutationKey = ["corporaCommanderApiProjectUpdateProject"];
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof corporaCommanderApiProjectUpdateProject>>,
    { projectId: string; data: ProjectUpdate }
  > = (props) => {
    const { projectId, data } = props ?? {};

    return corporaCommanderApiProjectUpdateProject(
      projectId,
      data,
      axiosOptions,
    );
  };

  return { mutationFn, ...mutationOptions };
};

export type CorporaCommanderApiProjectUpdateProjectMutationResult =
  NonNullable<
    Awaited<ReturnType<typeof corporaCommanderApiProjectUpdateProject>>
  >;
export type CorporaCommanderApiProjectUpdateProjectMutationBody =
  ProjectUpdate;
export type CorporaCommanderApiProjectUpdateProjectMutationError =
  AxiosError<unknown>;

/**
 * @summary Update Project
 */
export const useCorporaCommanderApiProjectUpdateProject = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof corporaCommanderApiProjectUpdateProject>>,
      TError,
      { projectId: string; data: ProjectUpdate },
      TContext
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof corporaCommanderApiProjectUpdateProject>>,
  TError,
  { projectId: string; data: ProjectUpdate },
  TContext
> => {
  const mutationOptions =
    getCorporaCommanderApiProjectUpdateProjectMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * Delete a project.
 * @summary Delete Project
 */
export const corporaCommanderApiProjectDeleteProject = (
  projectId: string,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<void>> => {
  return axios.default.delete(`/api/commander/projects/${projectId}`, options);
};

export const getCorporaCommanderApiProjectDeleteProjectMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof corporaCommanderApiProjectDeleteProject>>,
    TError,
    { projectId: string },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof corporaCommanderApiProjectDeleteProject>>,
  TError,
  { projectId: string },
  TContext
> => {
  const mutationKey = ["corporaCommanderApiProjectDeleteProject"];
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof corporaCommanderApiProjectDeleteProject>>,
    { projectId: string }
  > = (props) => {
    const { projectId } = props ?? {};

    return corporaCommanderApiProjectDeleteProject(projectId, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type CorporaCommanderApiProjectDeleteProjectMutationResult =
  NonNullable<
    Awaited<ReturnType<typeof corporaCommanderApiProjectDeleteProject>>
  >;

export type CorporaCommanderApiProjectDeleteProjectMutationError =
  AxiosError<unknown>;

/**
 * @summary Delete Project
 */
export const useCorporaCommanderApiProjectDeleteProject = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof corporaCommanderApiProjectDeleteProject>>,
      TError,
      { projectId: string },
      TContext
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof corporaCommanderApiProjectDeleteProject>>,
  TError,
  { projectId: string },
  TContext
> => {
  const mutationOptions =
    getCorporaCommanderApiProjectDeleteProjectMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * Generic data completion endpoint that accepts a schema description
and returns a model instance based on the provided schema.
 * @summary Generic Data Completion
 */
export const corporaCommanderApiLlmGenericDataCompletion = (
  genericCompletionRequest: GenericCompletionRequest,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<CorporaCommanderApiLlmGenericDataCompletion200>> => {
  return axios.default.post(
    `/api/commander/generic/complete`,
    genericCompletionRequest,
    options,
  );
};

export const getCorporaCommanderApiLlmGenericDataCompletionMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof corporaCommanderApiLlmGenericDataCompletion>>,
    TError,
    { data: GenericCompletionRequest },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof corporaCommanderApiLlmGenericDataCompletion>>,
  TError,
  { data: GenericCompletionRequest },
  TContext
> => {
  const mutationKey = ["corporaCommanderApiLlmGenericDataCompletion"];
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof corporaCommanderApiLlmGenericDataCompletion>>,
    { data: GenericCompletionRequest }
  > = (props) => {
    const { data } = props ?? {};

    return corporaCommanderApiLlmGenericDataCompletion(data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type CorporaCommanderApiLlmGenericDataCompletionMutationResult =
  NonNullable<
    Awaited<ReturnType<typeof corporaCommanderApiLlmGenericDataCompletion>>
  >;
export type CorporaCommanderApiLlmGenericDataCompletionMutationBody =
  GenericCompletionRequest;
export type CorporaCommanderApiLlmGenericDataCompletionMutationError =
  AxiosError<unknown>;

/**
 * @summary Generic Data Completion
 */
export const useCorporaCommanderApiLlmGenericDataCompletion = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof corporaCommanderApiLlmGenericDataCompletion>>,
      TError,
      { data: GenericCompletionRequest },
      TContext
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof corporaCommanderApiLlmGenericDataCompletion>>,
  TError,
  { data: GenericCompletionRequest },
  TContext
> => {
  const mutationOptions =
    getCorporaCommanderApiLlmGenericDataCompletionMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary List Subsections
 */
export const corporaCommanderApiSubsectionListSubsections = (
  sectionId: string,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<SubsectionOut[]>> => {
  return axios.default.get(
    `/api/commander/sections/${sectionId}/subsections`,
    options,
  );
};

export const getCorporaCommanderApiSubsectionListSubsectionsQueryKey = (
  sectionId: string,
) => {
  return [`/api/commander/sections/${sectionId}/subsections`] as const;
};

export const getCorporaCommanderApiSubsectionListSubsectionsQueryOptions = <
  TData = Awaited<
    ReturnType<typeof corporaCommanderApiSubsectionListSubsections>
  >,
  TError = AxiosError<unknown>,
>(
  sectionId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<
          ReturnType<typeof corporaCommanderApiSubsectionListSubsections>
        >,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getCorporaCommanderApiSubsectionListSubsectionsQueryKey(sectionId);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof corporaCommanderApiSubsectionListSubsections>>
  > = ({ signal }) =>
    corporaCommanderApiSubsectionListSubsections(sectionId, {
      signal,
      ...axiosOptions,
    });

  return {
    queryKey,
    queryFn,
    enabled: !!sectionId,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof corporaCommanderApiSubsectionListSubsections>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type CorporaCommanderApiSubsectionListSubsectionsQueryResult =
  NonNullable<
    Awaited<ReturnType<typeof corporaCommanderApiSubsectionListSubsections>>
  >;
export type CorporaCommanderApiSubsectionListSubsectionsQueryError =
  AxiosError<unknown>;

export function useCorporaCommanderApiSubsectionListSubsections<
  TData = Awaited<
    ReturnType<typeof corporaCommanderApiSubsectionListSubsections>
  >,
  TError = AxiosError<unknown>,
>(
  sectionId: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<
          ReturnType<typeof corporaCommanderApiSubsectionListSubsections>
        >,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<
            ReturnType<typeof corporaCommanderApiSubsectionListSubsections>
          >,
          TError,
          Awaited<
            ReturnType<typeof corporaCommanderApiSubsectionListSubsections>
          >
        >,
        "initialData"
      >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useCorporaCommanderApiSubsectionListSubsections<
  TData = Awaited<
    ReturnType<typeof corporaCommanderApiSubsectionListSubsections>
  >,
  TError = AxiosError<unknown>,
>(
  sectionId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<
          ReturnType<typeof corporaCommanderApiSubsectionListSubsections>
        >,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<
            ReturnType<typeof corporaCommanderApiSubsectionListSubsections>
          >,
          TError,
          Awaited<
            ReturnType<typeof corporaCommanderApiSubsectionListSubsections>
          >
        >,
        "initialData"
      >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useCorporaCommanderApiSubsectionListSubsections<
  TData = Awaited<
    ReturnType<typeof corporaCommanderApiSubsectionListSubsections>
  >,
  TError = AxiosError<unknown>,
>(
  sectionId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<
          ReturnType<typeof corporaCommanderApiSubsectionListSubsections>
        >,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary List Subsections
 */

export function useCorporaCommanderApiSubsectionListSubsections<
  TData = Awaited<
    ReturnType<typeof corporaCommanderApiSubsectionListSubsections>
  >,
  TError = AxiosError<unknown>,
>(
  sectionId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<
          ReturnType<typeof corporaCommanderApiSubsectionListSubsections>
        >,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions =
    getCorporaCommanderApiSubsectionListSubsectionsQueryOptions(
      sectionId,
      options,
    );

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Create Subsection
 */
export const corporaCommanderApiSubsectionCreateSubsection = (
  sectionId: string,
  subsectionIn: SubsectionIn,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<SubsectionOut>> => {
  return axios.default.post(
    `/api/commander/sections/${sectionId}/subsections`,
    subsectionIn,
    options,
  );
};

export const getCorporaCommanderApiSubsectionCreateSubsectionMutationOptions =
  <TError = AxiosError<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
      Awaited<
        ReturnType<typeof corporaCommanderApiSubsectionCreateSubsection>
      >,
      TError,
      { sectionId: string; data: SubsectionIn },
      TContext
    >;
    axios?: AxiosRequestConfig;
  }): UseMutationOptions<
    Awaited<ReturnType<typeof corporaCommanderApiSubsectionCreateSubsection>>,
    TError,
    { sectionId: string; data: SubsectionIn },
    TContext
  > => {
    const mutationKey = ["corporaCommanderApiSubsectionCreateSubsection"];
    const { mutation: mutationOptions, axios: axiosOptions } = options
      ? options.mutation &&
        "mutationKey" in options.mutation &&
        options.mutation.mutationKey
        ? options
        : { ...options, mutation: { ...options.mutation, mutationKey } }
      : { mutation: { mutationKey }, axios: undefined };

    const mutationFn: MutationFunction<
      Awaited<
        ReturnType<typeof corporaCommanderApiSubsectionCreateSubsection>
      >,
      { sectionId: string; data: SubsectionIn }
    > = (props) => {
      const { sectionId, data } = props ?? {};

      return corporaCommanderApiSubsectionCreateSubsection(
        sectionId,
        data,
        axiosOptions,
      );
    };

    return { mutationFn, ...mutationOptions };
  };

export type CorporaCommanderApiSubsectionCreateSubsectionMutationResult =
  NonNullable<
    Awaited<ReturnType<typeof corporaCommanderApiSubsectionCreateSubsection>>
  >;
export type CorporaCommanderApiSubsectionCreateSubsectionMutationBody =
  SubsectionIn;
export type CorporaCommanderApiSubsectionCreateSubsectionMutationError =
  AxiosError<unknown>;

/**
 * @summary Create Subsection
 */
export const useCorporaCommanderApiSubsectionCreateSubsection = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<
        ReturnType<typeof corporaCommanderApiSubsectionCreateSubsection>
      >,
      TError,
      { sectionId: string; data: SubsectionIn },
      TContext
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof corporaCommanderApiSubsectionCreateSubsection>>,
  TError,
  { sectionId: string; data: SubsectionIn },
  TContext
> => {
  const mutationOptions =
    getCorporaCommanderApiSubsectionCreateSubsectionMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Get Subsection
 */
export const corporaCommanderApiSubsectionGetSubsection = (
  subsectionId: string,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<SubsectionOut>> => {
  return axios.default.get(
    `/api/commander/subsections/${subsectionId}`,
    options,
  );
};

export const getCorporaCommanderApiSubsectionGetSubsectionQueryKey = (
  subsectionId: string,
) => {
  return [`/api/commander/subsections/${subsectionId}`] as const;
};

export const getCorporaCommanderApiSubsectionGetSubsectionQueryOptions = <
  TData = Awaited<
    ReturnType<typeof corporaCommanderApiSubsectionGetSubsection>
  >,
  TError = AxiosError<unknown>,
>(
  subsectionId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof corporaCommanderApiSubsectionGetSubsection>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getCorporaCommanderApiSubsectionGetSubsectionQueryKey(subsectionId);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof corporaCommanderApiSubsectionGetSubsection>>
  > = ({ signal }) =>
    corporaCommanderApiSubsectionGetSubsection(subsectionId, {
      signal,
      ...axiosOptions,
    });

  return {
    queryKey,
    queryFn,
    enabled: !!subsectionId,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof corporaCommanderApiSubsectionGetSubsection>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type CorporaCommanderApiSubsectionGetSubsectionQueryResult =
  NonNullable<
    Awaited<ReturnType<typeof corporaCommanderApiSubsectionGetSubsection>>
  >;
export type CorporaCommanderApiSubsectionGetSubsectionQueryError =
  AxiosError<unknown>;

export function useCorporaCommanderApiSubsectionGetSubsection<
  TData = Awaited<
    ReturnType<typeof corporaCommanderApiSubsectionGetSubsection>
  >,
  TError = AxiosError<unknown>,
>(
  subsectionId: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof corporaCommanderApiSubsectionGetSubsection>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<
            ReturnType<typeof corporaCommanderApiSubsectionGetSubsection>
          >,
          TError,
          Awaited<
            ReturnType<typeof corporaCommanderApiSubsectionGetSubsection>
          >
        >,
        "initialData"
      >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useCorporaCommanderApiSubsectionGetSubsection<
  TData = Awaited<
    ReturnType<typeof corporaCommanderApiSubsectionGetSubsection>
  >,
  TError = AxiosError<unknown>,
>(
  subsectionId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof corporaCommanderApiSubsectionGetSubsection>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<
            ReturnType<typeof corporaCommanderApiSubsectionGetSubsection>
          >,
          TError,
          Awaited<
            ReturnType<typeof corporaCommanderApiSubsectionGetSubsection>
          >
        >,
        "initialData"
      >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useCorporaCommanderApiSubsectionGetSubsection<
  TData = Awaited<
    ReturnType<typeof corporaCommanderApiSubsectionGetSubsection>
  >,
  TError = AxiosError<unknown>,
>(
  subsectionId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof corporaCommanderApiSubsectionGetSubsection>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get Subsection
 */

export function useCorporaCommanderApiSubsectionGetSubsection<
  TData = Awaited<
    ReturnType<typeof corporaCommanderApiSubsectionGetSubsection>
  >,
  TError = AxiosError<unknown>,
>(
  subsectionId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof corporaCommanderApiSubsectionGetSubsection>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions =
    getCorporaCommanderApiSubsectionGetSubsectionQueryOptions(
      subsectionId,
      options,
    );

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Update Subsection
 */
export const corporaCommanderApiSubsectionUpdateSubsection = (
  subsectionId: string,
  subsectionUpdate: SubsectionUpdate,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<SubsectionOut>> => {
  return axios.default.put(
    `/api/commander/subsections/${subsectionId}`,
    subsectionUpdate,
    options,
  );
};

export const getCorporaCommanderApiSubsectionUpdateSubsectionMutationOptions =
  <TError = AxiosError<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
      Awaited<
        ReturnType<typeof corporaCommanderApiSubsectionUpdateSubsection>
      >,
      TError,
      { subsectionId: string; data: SubsectionUpdate },
      TContext
    >;
    axios?: AxiosRequestConfig;
  }): UseMutationOptions<
    Awaited<ReturnType<typeof corporaCommanderApiSubsectionUpdateSubsection>>,
    TError,
    { subsectionId: string; data: SubsectionUpdate },
    TContext
  > => {
    const mutationKey = ["corporaCommanderApiSubsectionUpdateSubsection"];
    const { mutation: mutationOptions, axios: axiosOptions } = options
      ? options.mutation &&
        "mutationKey" in options.mutation &&
        options.mutation.mutationKey
        ? options
        : { ...options, mutation: { ...options.mutation, mutationKey } }
      : { mutation: { mutationKey }, axios: undefined };

    const mutationFn: MutationFunction<
      Awaited<
        ReturnType<typeof corporaCommanderApiSubsectionUpdateSubsection>
      >,
      { subsectionId: string; data: SubsectionUpdate }
    > = (props) => {
      const { subsectionId, data } = props ?? {};

      return corporaCommanderApiSubsectionUpdateSubsection(
        subsectionId,
        data,
        axiosOptions,
      );
    };

    return { mutationFn, ...mutationOptions };
  };

export type CorporaCommanderApiSubsectionUpdateSubsectionMutationResult =
  NonNullable<
    Awaited<ReturnType<typeof corporaCommanderApiSubsectionUpdateSubsection>>
  >;
export type CorporaCommanderApiSubsectionUpdateSubsectionMutationBody =
  SubsectionUpdate;
export type CorporaCommanderApiSubsectionUpdateSubsectionMutationError =
  AxiosError<unknown>;

/**
 * @summary Update Subsection
 */
export const useCorporaCommanderApiSubsectionUpdateSubsection = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<
        ReturnType<typeof corporaCommanderApiSubsectionUpdateSubsection>
      >,
      TError,
      { subsectionId: string; data: SubsectionUpdate },
      TContext
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof corporaCommanderApiSubsectionUpdateSubsection>>,
  TError,
  { subsectionId: string; data: SubsectionUpdate },
  TContext
> => {
  const mutationOptions =
    getCorporaCommanderApiSubsectionUpdateSubsectionMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Delete Subsection
 */
export const corporaCommanderApiSubsectionDeleteSubsection = (
  subsectionId: string,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<void>> => {
  return axios.default.delete(
    `/api/commander/subsections/${subsectionId}`,
    options,
  );
};

export const getCorporaCommanderApiSubsectionDeleteSubsectionMutationOptions =
  <TError = AxiosError<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
      Awaited<
        ReturnType<typeof corporaCommanderApiSubsectionDeleteSubsection>
      >,
      TError,
      { subsectionId: string },
      TContext
    >;
    axios?: AxiosRequestConfig;
  }): UseMutationOptions<
    Awaited<ReturnType<typeof corporaCommanderApiSubsectionDeleteSubsection>>,
    TError,
    { subsectionId: string },
    TContext
  > => {
    const mutationKey = ["corporaCommanderApiSubsectionDeleteSubsection"];
    const { mutation: mutationOptions, axios: axiosOptions } = options
      ? options.mutation &&
        "mutationKey" in options.mutation &&
        options.mutation.mutationKey
        ? options
        : { ...options, mutation: { ...options.mutation, mutationKey } }
      : { mutation: { mutationKey }, axios: undefined };

    const mutationFn: MutationFunction<
      Awaited<
        ReturnType<typeof corporaCommanderApiSubsectionDeleteSubsection>
      >,
      { subsectionId: string }
    > = (props) => {
      const { subsectionId } = props ?? {};

      return corporaCommanderApiSubsectionDeleteSubsection(
        subsectionId,
        axiosOptions,
      );
    };

    return { mutationFn, ...mutationOptions };
  };

export type CorporaCommanderApiSubsectionDeleteSubsectionMutationResult =
  NonNullable<
    Awaited<ReturnType<typeof corporaCommanderApiSubsectionDeleteSubsection>>
  >;

export type CorporaCommanderApiSubsectionDeleteSubsectionMutationError =
  AxiosError<unknown>;

/**
 * @summary Delete Subsection
 */
export const useCorporaCommanderApiSubsectionDeleteSubsection = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<
        ReturnType<typeof corporaCommanderApiSubsectionDeleteSubsection>
      >,
      TError,
      { subsectionId: string },
      TContext
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof corporaCommanderApiSubsectionDeleteSubsection>>,
  TError,
  { subsectionId: string },
  TContext
> => {
  const mutationOptions =
    getCorporaCommanderApiSubsectionDeleteSubsectionMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary List Sections
 */
export const corporaCommanderApiSectionListSections = (
  projectId: string,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<SectionWithSubsections[]>> => {
  return axios.default.get(
    `/api/commander/projects/${projectId}/sections`,
    options,
  );
};

export const getCorporaCommanderApiSectionListSectionsQueryKey = (
  projectId: string,
) => {
  return [`/api/commander/projects/${projectId}/sections`] as const;
};

export const getCorporaCommanderApiSectionListSectionsQueryOptions = <
  TData = Awaited<ReturnType<typeof corporaCommanderApiSectionListSections>>,
  TError = AxiosError<unknown>,
>(
  projectId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof corporaCommanderApiSectionListSections>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getCorporaCommanderApiSectionListSectionsQueryKey(projectId);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof corporaCommanderApiSectionListSections>>
  > = ({ signal }) =>
    corporaCommanderApiSectionListSections(projectId, {
      signal,
      ...axiosOptions,
    });

  return {
    queryKey,
    queryFn,
    enabled: !!projectId,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof corporaCommanderApiSectionListSections>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type CorporaCommanderApiSectionListSectionsQueryResult = NonNullable<
  Awaited<ReturnType<typeof corporaCommanderApiSectionListSections>>
>;
export type CorporaCommanderApiSectionListSectionsQueryError =
  AxiosError<unknown>;

export function useCorporaCommanderApiSectionListSections<
  TData = Awaited<ReturnType<typeof corporaCommanderApiSectionListSections>>,
  TError = AxiosError<unknown>,
>(
  projectId: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof corporaCommanderApiSectionListSections>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof corporaCommanderApiSectionListSections>>,
          TError,
          Awaited<ReturnType<typeof corporaCommanderApiSectionListSections>>
        >,
        "initialData"
      >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useCorporaCommanderApiSectionListSections<
  TData = Awaited<ReturnType<typeof corporaCommanderApiSectionListSections>>,
  TError = AxiosError<unknown>,
>(
  projectId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof corporaCommanderApiSectionListSections>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof corporaCommanderApiSectionListSections>>,
          TError,
          Awaited<ReturnType<typeof corporaCommanderApiSectionListSections>>
        >,
        "initialData"
      >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useCorporaCommanderApiSectionListSections<
  TData = Awaited<ReturnType<typeof corporaCommanderApiSectionListSections>>,
  TError = AxiosError<unknown>,
>(
  projectId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof corporaCommanderApiSectionListSections>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary List Sections
 */

export function useCorporaCommanderApiSectionListSections<
  TData = Awaited<ReturnType<typeof corporaCommanderApiSectionListSections>>,
  TError = AxiosError<unknown>,
>(
  projectId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof corporaCommanderApiSectionListSections>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getCorporaCommanderApiSectionListSectionsQueryOptions(
    projectId,
    options,
  );

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Create Section
 */
export const corporaCommanderApiSectionCreateSection = (
  projectId: string,
  sectionIn: SectionIn,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<SectionOut>> => {
  return axios.default.post(
    `/api/commander/projects/${projectId}/sections`,
    sectionIn,
    options,
  );
};

export const getCorporaCommanderApiSectionCreateSectionMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof corporaCommanderApiSectionCreateSection>>,
    TError,
    { projectId: string; data: SectionIn },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof corporaCommanderApiSectionCreateSection>>,
  TError,
  { projectId: string; data: SectionIn },
  TContext
> => {
  const mutationKey = ["corporaCommanderApiSectionCreateSection"];
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof corporaCommanderApiSectionCreateSection>>,
    { projectId: string; data: SectionIn }
  > = (props) => {
    const { projectId, data } = props ?? {};

    return corporaCommanderApiSectionCreateSection(
      projectId,
      data,
      axiosOptions,
    );
  };

  return { mutationFn, ...mutationOptions };
};

export type CorporaCommanderApiSectionCreateSectionMutationResult =
  NonNullable<
    Awaited<ReturnType<typeof corporaCommanderApiSectionCreateSection>>
  >;
export type CorporaCommanderApiSectionCreateSectionMutationBody = SectionIn;
export type CorporaCommanderApiSectionCreateSectionMutationError =
  AxiosError<unknown>;

/**
 * @summary Create Section
 */
export const useCorporaCommanderApiSectionCreateSection = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof corporaCommanderApiSectionCreateSection>>,
      TError,
      { projectId: string; data: SectionIn },
      TContext
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof corporaCommanderApiSectionCreateSection>>,
  TError,
  { projectId: string; data: SectionIn },
  TContext
> => {
  const mutationOptions =
    getCorporaCommanderApiSectionCreateSectionMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Get Section
 */
export const corporaCommanderApiSectionGetSection = (
  sectionId: string,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<SectionOut>> => {
  return axios.default.get(`/api/commander/sections/${sectionId}`, options);
};

export const getCorporaCommanderApiSectionGetSectionQueryKey = (
  sectionId: string,
) => {
  return [`/api/commander/sections/${sectionId}`] as const;
};

export const getCorporaCommanderApiSectionGetSectionQueryOptions = <
  TData = Awaited<ReturnType<typeof corporaCommanderApiSectionGetSection>>,
  TError = AxiosError<unknown>,
>(
  sectionId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof corporaCommanderApiSectionGetSection>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getCorporaCommanderApiSectionGetSectionQueryKey(sectionId);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof corporaCommanderApiSectionGetSection>>
  > = ({ signal }) =>
    corporaCommanderApiSectionGetSection(sectionId, {
      signal,
      ...axiosOptions,
    });

  return {
    queryKey,
    queryFn,
    enabled: !!sectionId,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof corporaCommanderApiSectionGetSection>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type CorporaCommanderApiSectionGetSectionQueryResult = NonNullable<
  Awaited<ReturnType<typeof corporaCommanderApiSectionGetSection>>
>;
export type CorporaCommanderApiSectionGetSectionQueryError =
  AxiosError<unknown>;

export function useCorporaCommanderApiSectionGetSection<
  TData = Awaited<ReturnType<typeof corporaCommanderApiSectionGetSection>>,
  TError = AxiosError<unknown>,
>(
  sectionId: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof corporaCommanderApiSectionGetSection>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof corporaCommanderApiSectionGetSection>>,
          TError,
          Awaited<ReturnType<typeof corporaCommanderApiSectionGetSection>>
        >,
        "initialData"
      >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useCorporaCommanderApiSectionGetSection<
  TData = Awaited<ReturnType<typeof corporaCommanderApiSectionGetSection>>,
  TError = AxiosError<unknown>,
>(
  sectionId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof corporaCommanderApiSectionGetSection>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof corporaCommanderApiSectionGetSection>>,
          TError,
          Awaited<ReturnType<typeof corporaCommanderApiSectionGetSection>>
        >,
        "initialData"
      >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useCorporaCommanderApiSectionGetSection<
  TData = Awaited<ReturnType<typeof corporaCommanderApiSectionGetSection>>,
  TError = AxiosError<unknown>,
>(
  sectionId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof corporaCommanderApiSectionGetSection>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get Section
 */

export function useCorporaCommanderApiSectionGetSection<
  TData = Awaited<ReturnType<typeof corporaCommanderApiSectionGetSection>>,
  TError = AxiosError<unknown>,
>(
  sectionId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof corporaCommanderApiSectionGetSection>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getCorporaCommanderApiSectionGetSectionQueryOptions(
    sectionId,
    options,
  );

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Update Section
 */
export const corporaCommanderApiSectionUpdateSection = (
  sectionId: string,
  sectionUpdate: SectionUpdate,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<SectionOut>> => {
  return axios.default.put(
    `/api/commander/sections/${sectionId}`,
    sectionUpdate,
    options,
  );
};

export const getCorporaCommanderApiSectionUpdateSectionMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof corporaCommanderApiSectionUpdateSection>>,
    TError,
    { sectionId: string; data: SectionUpdate },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof corporaCommanderApiSectionUpdateSection>>,
  TError,
  { sectionId: string; data: SectionUpdate },
  TContext
> => {
  const mutationKey = ["corporaCommanderApiSectionUpdateSection"];
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof corporaCommanderApiSectionUpdateSection>>,
    { sectionId: string; data: SectionUpdate }
  > = (props) => {
    const { sectionId, data } = props ?? {};

    return corporaCommanderApiSectionUpdateSection(
      sectionId,
      data,
      axiosOptions,
    );
  };

  return { mutationFn, ...mutationOptions };
};

export type CorporaCommanderApiSectionUpdateSectionMutationResult =
  NonNullable<
    Awaited<ReturnType<typeof corporaCommanderApiSectionUpdateSection>>
  >;
export type CorporaCommanderApiSectionUpdateSectionMutationBody =
  SectionUpdate;
export type CorporaCommanderApiSectionUpdateSectionMutationError =
  AxiosError<unknown>;

/**
 * @summary Update Section
 */
export const useCorporaCommanderApiSectionUpdateSection = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof corporaCommanderApiSectionUpdateSection>>,
      TError,
      { sectionId: string; data: SectionUpdate },
      TContext
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof corporaCommanderApiSectionUpdateSection>>,
  TError,
  { sectionId: string; data: SectionUpdate },
  TContext
> => {
  const mutationOptions =
    getCorporaCommanderApiSectionUpdateSectionMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Delete Section
 */
export const corporaCommanderApiSectionDeleteSection = (
  sectionId: string,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<void>> => {
  return axios.default.delete(`/api/commander/sections/${sectionId}`, options);
};

export const getCorporaCommanderApiSectionDeleteSectionMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof corporaCommanderApiSectionDeleteSection>>,
    TError,
    { sectionId: string },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof corporaCommanderApiSectionDeleteSection>>,
  TError,
  { sectionId: string },
  TContext
> => {
  const mutationKey = ["corporaCommanderApiSectionDeleteSection"];
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof corporaCommanderApiSectionDeleteSection>>,
    { sectionId: string }
  > = (props) => {
    const { sectionId } = props ?? {};

    return corporaCommanderApiSectionDeleteSection(sectionId, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type CorporaCommanderApiSectionDeleteSectionMutationResult =
  NonNullable<
    Awaited<ReturnType<typeof corporaCommanderApiSectionDeleteSection>>
  >;

export type CorporaCommanderApiSectionDeleteSectionMutationError =
  AxiosError<unknown>;

/**
 * @summary Delete Section
 */
export const useCorporaCommanderApiSectionDeleteSection = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof corporaCommanderApiSectionDeleteSection>>,
      TError,
      { sectionId: string },
      TContext
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof corporaCommanderApiSectionDeleteSection>>,
  TError,
  { sectionId: string },
  TContext
> => {
  const mutationOptions =
    getCorporaCommanderApiSectionDeleteSectionMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Generate Outline
 */
export const corporaCommanderApiOutlineGenerateOutline = (
  projectId: string,
  outlineRequest: OutlineRequest,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<OutlineResponse>> => {
  return axios.default.post(
    `/api/commander/projects/${projectId}/outline`,
    outlineRequest,
    options,
  );
};

export const getCorporaCommanderApiOutlineGenerateOutlineMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof corporaCommanderApiOutlineGenerateOutline>>,
    TError,
    { projectId: string; data: OutlineRequest },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof corporaCommanderApiOutlineGenerateOutline>>,
  TError,
  { projectId: string; data: OutlineRequest },
  TContext
> => {
  const mutationKey = ["corporaCommanderApiOutlineGenerateOutline"];
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof corporaCommanderApiOutlineGenerateOutline>>,
    { projectId: string; data: OutlineRequest }
  > = (props) => {
    const { projectId, data } = props ?? {};

    return corporaCommanderApiOutlineGenerateOutline(
      projectId,
      data,
      axiosOptions,
    );
  };

  return { mutationFn, ...mutationOptions };
};

export type CorporaCommanderApiOutlineGenerateOutlineMutationResult =
  NonNullable<
    Awaited<ReturnType<typeof corporaCommanderApiOutlineGenerateOutline>>
  >;
export type CorporaCommanderApiOutlineGenerateOutlineMutationBody =
  OutlineRequest;
export type CorporaCommanderApiOutlineGenerateOutlineMutationError =
  AxiosError<unknown>;

/**
 * @summary Generate Outline
 */
export const useCorporaCommanderApiOutlineGenerateOutline = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof corporaCommanderApiOutlineGenerateOutline>>,
      TError,
      { projectId: string; data: OutlineRequest },
      TContext
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof corporaCommanderApiOutlineGenerateOutline>>,
  TError,
  { projectId: string; data: OutlineRequest },
  TContext
> => {
  const mutationOptions =
    getCorporaCommanderApiOutlineGenerateOutlineMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * Generate a draft for every section in the project, using the shared
prompt-builder to enforce all markdown, image-token, and JSON rules.
 * @summary Draft Book
 */
export const corporaCommanderApiDraftDraftBook = (
  projectId: string,
  draftBookRequest: DraftBookRequest,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<DraftBookResponse>> => {
  return axios.default.post(
    `/api/commander/projects/${projectId}/draft`,
    draftBookRequest,
    options,
  );
};

export const getCorporaCommanderApiDraftDraftBookMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof corporaCommanderApiDraftDraftBook>>,
    TError,
    { projectId: string; data: DraftBookRequest },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof corporaCommanderApiDraftDraftBook>>,
  TError,
  { projectId: string; data: DraftBookRequest },
  TContext
> => {
  const mutationKey = ["corporaCommanderApiDraftDraftBook"];
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof corporaCommanderApiDraftDraftBook>>,
    { projectId: string; data: DraftBookRequest }
  > = (props) => {
    const { projectId, data } = props ?? {};

    return corporaCommanderApiDraftDraftBook(projectId, data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type CorporaCommanderApiDraftDraftBookMutationResult = NonNullable<
  Awaited<ReturnType<typeof corporaCommanderApiDraftDraftBook>>
>;
export type CorporaCommanderApiDraftDraftBookMutationBody = DraftBookRequest;
export type CorporaCommanderApiDraftDraftBookMutationError =
  AxiosError<unknown>;

/**
 * @summary Draft Book
 */
export const useCorporaCommanderApiDraftDraftBook = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof corporaCommanderApiDraftDraftBook>>,
      TError,
      { projectId: string; data: DraftBookRequest },
      TContext
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof corporaCommanderApiDraftDraftBook>>,
  TError,
  { projectId: string; data: DraftBookRequest },
  TContext
> => {
  const mutationOptions =
    getCorporaCommanderApiDraftDraftBookMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Export Pdf
 */
export const corporaCommanderApiExportExportPdf = (
  projectId: string,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<void>> => {
  return axios.default.get(
    `/api/commander/projects/${projectId}/export/pdf`,
    options,
  );
};

export const getCorporaCommanderApiExportExportPdfQueryKey = (
  projectId: string,
) => {
  return [`/api/commander/projects/${projectId}/export/pdf`] as const;
};

export const getCorporaCommanderApiExportExportPdfQueryOptions = <
  TData = Awaited<ReturnType<typeof corporaCommanderApiExportExportPdf>>,
  TError = AxiosError<unknown>,
>(
  projectId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof corporaCommanderApiExportExportPdf>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getCorporaCommanderApiExportExportPdfQueryKey(projectId);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof corporaCommanderApiExportExportPdf>>
  > = ({ signal }) =>
    corporaCommanderApiExportExportPdf(projectId, { signal, ...axiosOptions });

  return {
    queryKey,
    queryFn,
    enabled: !!projectId,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof corporaCommanderApiExportExportPdf>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type CorporaCommanderApiExportExportPdfQueryResult = NonNullable<
  Awaited<ReturnType<typeof corporaCommanderApiExportExportPdf>>
>;
export type CorporaCommanderApiExportExportPdfQueryError = AxiosError<unknown>;

export function useCorporaCommanderApiExportExportPdf<
  TData = Awaited<ReturnType<typeof corporaCommanderApiExportExportPdf>>,
  TError = AxiosError<unknown>,
>(
  projectId: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof corporaCommanderApiExportExportPdf>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof corporaCommanderApiExportExportPdf>>,
          TError,
          Awaited<ReturnType<typeof corporaCommanderApiExportExportPdf>>
        >,
        "initialData"
      >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useCorporaCommanderApiExportExportPdf<
  TData = Awaited<ReturnType<typeof corporaCommanderApiExportExportPdf>>,
  TError = AxiosError<unknown>,
>(
  projectId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof corporaCommanderApiExportExportPdf>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof corporaCommanderApiExportExportPdf>>,
          TError,
          Awaited<ReturnType<typeof corporaCommanderApiExportExportPdf>>
        >,
        "initialData"
      >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useCorporaCommanderApiExportExportPdf<
  TData = Awaited<ReturnType<typeof corporaCommanderApiExportExportPdf>>,
  TError = AxiosError<unknown>,
>(
  projectId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof corporaCommanderApiExportExportPdf>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Export Pdf
 */

export function useCorporaCommanderApiExportExportPdf<
  TData = Awaited<ReturnType<typeof corporaCommanderApiExportExportPdf>>,
  TError = AxiosError<unknown>,
>(
  projectId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof corporaCommanderApiExportExportPdf>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getCorporaCommanderApiExportExportPdfQueryOptions(
    projectId,
    options,
  );

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Rewrite Sections
 */
export const corporaCommanderApiRewriteRewriteSections = (
  projectId: string,
  rewriteRequest: RewriteRequest,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<RewriteSection[]>> => {
  return axios.default.post(
    `/api/commander/projects/${projectId}/rewrite/sections`,
    rewriteRequest,
    options,
  );
};

export const getCorporaCommanderApiRewriteRewriteSectionsMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof corporaCommanderApiRewriteRewriteSections>>,
    TError,
    { projectId: string; data: RewriteRequest },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof corporaCommanderApiRewriteRewriteSections>>,
  TError,
  { projectId: string; data: RewriteRequest },
  TContext
> => {
  const mutationKey = ["corporaCommanderApiRewriteRewriteSections"];
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof corporaCommanderApiRewriteRewriteSections>>,
    { projectId: string; data: RewriteRequest }
  > = (props) => {
    const { projectId, data } = props ?? {};

    return corporaCommanderApiRewriteRewriteSections(
      projectId,
      data,
      axiosOptions,
    );
  };

  return { mutationFn, ...mutationOptions };
};

export type CorporaCommanderApiRewriteRewriteSectionsMutationResult =
  NonNullable<
    Awaited<ReturnType<typeof corporaCommanderApiRewriteRewriteSections>>
  >;
export type CorporaCommanderApiRewriteRewriteSectionsMutationBody =
  RewriteRequest;
export type CorporaCommanderApiRewriteRewriteSectionsMutationError =
  AxiosError<unknown>;

/**
 * @summary Rewrite Sections
 */
export const useCorporaCommanderApiRewriteRewriteSections = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof corporaCommanderApiRewriteRewriteSections>>,
      TError,
      { projectId: string; data: RewriteRequest },
      TContext
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof corporaCommanderApiRewriteRewriteSections>>,
  TError,
  { projectId: string; data: RewriteRequest },
  TContext
> => {
  const mutationOptions =
    getCorporaCommanderApiRewriteRewriteSectionsMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Rewrite Subsections
 */
export const corporaCommanderApiRewriteRewriteSubsections = (
  projectId: string,
  rewriteRequest: RewriteRequest,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<RewriteSubsection[]>> => {
  return axios.default.post(
    `/api/commander/projects/${projectId}/rewrite/subsections`,
    rewriteRequest,
    options,
  );
};

export const getCorporaCommanderApiRewriteRewriteSubsectionsMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof corporaCommanderApiRewriteRewriteSubsections>>,
    TError,
    { projectId: string; data: RewriteRequest },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof corporaCommanderApiRewriteRewriteSubsections>>,
  TError,
  { projectId: string; data: RewriteRequest },
  TContext
> => {
  const mutationKey = ["corporaCommanderApiRewriteRewriteSubsections"];
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof corporaCommanderApiRewriteRewriteSubsections>>,
    { projectId: string; data: RewriteRequest }
  > = (props) => {
    const { projectId, data } = props ?? {};

    return corporaCommanderApiRewriteRewriteSubsections(
      projectId,
      data,
      axiosOptions,
    );
  };

  return { mutationFn, ...mutationOptions };
};

export type CorporaCommanderApiRewriteRewriteSubsectionsMutationResult =
  NonNullable<
    Awaited<ReturnType<typeof corporaCommanderApiRewriteRewriteSubsections>>
  >;
export type CorporaCommanderApiRewriteRewriteSubsectionsMutationBody =
  RewriteRequest;
export type CorporaCommanderApiRewriteRewriteSubsectionsMutationError =
  AxiosError<unknown>;

/**
 * @summary Rewrite Subsections
 */
export const useCorporaCommanderApiRewriteRewriteSubsections = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof corporaCommanderApiRewriteRewriteSubsections>>,
      TError,
      { projectId: string; data: RewriteRequest },
      TContext
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof corporaCommanderApiRewriteRewriteSubsections>>,
  TError,
  { projectId: string; data: RewriteRequest },
  TContext
> => {
  const mutationOptions =
    getCorporaCommanderApiRewriteRewriteSubsectionsMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary List Images
 */
export const corporaCommanderApiImagesListImages = (
  projectId: string,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<ProjectImageOut[]>> => {
  return axios.default.get(
    `/api/commander/projects/${projectId}/images/`,
    options,
  );
};

export const getCorporaCommanderApiImagesListImagesQueryKey = (
  projectId: string,
) => {
  return [`/api/commander/projects/${projectId}/images/`] as const;
};

export const getCorporaCommanderApiImagesListImagesQueryOptions = <
  TData = Awaited<ReturnType<typeof corporaCommanderApiImagesListImages>>,
  TError = AxiosError<unknown>,
>(
  projectId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof corporaCommanderApiImagesListImages>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getCorporaCommanderApiImagesListImagesQueryKey(projectId);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof corporaCommanderApiImagesListImages>>
  > = ({ signal }) =>
    corporaCommanderApiImagesListImages(projectId, {
      signal,
      ...axiosOptions,
    });

  return {
    queryKey,
    queryFn,
    enabled: !!projectId,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof corporaCommanderApiImagesListImages>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type CorporaCommanderApiImagesListImagesQueryResult = NonNullable<
  Awaited<ReturnType<typeof corporaCommanderApiImagesListImages>>
>;
export type CorporaCommanderApiImagesListImagesQueryError =
  AxiosError<unknown>;

export function useCorporaCommanderApiImagesListImages<
  TData = Awaited<ReturnType<typeof corporaCommanderApiImagesListImages>>,
  TError = AxiosError<unknown>,
>(
  projectId: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof corporaCommanderApiImagesListImages>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof corporaCommanderApiImagesListImages>>,
          TError,
          Awaited<ReturnType<typeof corporaCommanderApiImagesListImages>>
        >,
        "initialData"
      >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useCorporaCommanderApiImagesListImages<
  TData = Awaited<ReturnType<typeof corporaCommanderApiImagesListImages>>,
  TError = AxiosError<unknown>,
>(
  projectId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof corporaCommanderApiImagesListImages>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof corporaCommanderApiImagesListImages>>,
          TError,
          Awaited<ReturnType<typeof corporaCommanderApiImagesListImages>>
        >,
        "initialData"
      >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useCorporaCommanderApiImagesListImages<
  TData = Awaited<ReturnType<typeof corporaCommanderApiImagesListImages>>,
  TError = AxiosError<unknown>,
>(
  projectId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof corporaCommanderApiImagesListImages>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary List Images
 */

export function useCorporaCommanderApiImagesListImages<
  TData = Awaited<ReturnType<typeof corporaCommanderApiImagesListImages>>,
  TError = AxiosError<unknown>,
>(
  projectId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof corporaCommanderApiImagesListImages>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getCorporaCommanderApiImagesListImagesQueryOptions(
    projectId,
    options,
  );

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Create Image
 */
export const corporaCommanderApiImagesCreateImage = (
  projectId: string,
  corporaCommanderApiImagesCreateImageBody: CorporaCommanderApiImagesCreateImageBody,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<ProjectImageOut>> => {
  const formData = createFormData(corporaCommanderApiImagesCreateImageBody);
  return axios.default.post(
    `/api/commander/projects/${projectId}/images/`,
    formData,
    options,
  );
};

export const getCorporaCommanderApiImagesCreateImageMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof corporaCommanderApiImagesCreateImage>>,
    TError,
    { projectId: string; data: CorporaCommanderApiImagesCreateImageBody },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof corporaCommanderApiImagesCreateImage>>,
  TError,
  { projectId: string; data: CorporaCommanderApiImagesCreateImageBody },
  TContext
> => {
  const mutationKey = ["corporaCommanderApiImagesCreateImage"];
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof corporaCommanderApiImagesCreateImage>>,
    { projectId: string; data: CorporaCommanderApiImagesCreateImageBody }
  > = (props) => {
    const { projectId, data } = props ?? {};

    return corporaCommanderApiImagesCreateImage(projectId, data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type CorporaCommanderApiImagesCreateImageMutationResult = NonNullable<
  Awaited<ReturnType<typeof corporaCommanderApiImagesCreateImage>>
>;
export type CorporaCommanderApiImagesCreateImageMutationBody =
  CorporaCommanderApiImagesCreateImageBody;
export type CorporaCommanderApiImagesCreateImageMutationError =
  AxiosError<unknown>;

/**
 * @summary Create Image
 */
export const useCorporaCommanderApiImagesCreateImage = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof corporaCommanderApiImagesCreateImage>>,
      TError,
      { projectId: string; data: CorporaCommanderApiImagesCreateImageBody },
      TContext
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof corporaCommanderApiImagesCreateImage>>,
  TError,
  { projectId: string; data: CorporaCommanderApiImagesCreateImageBody },
  TContext
> => {
  const mutationOptions =
    getCorporaCommanderApiImagesCreateImageMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Get Image
 */
export const corporaCommanderApiImagesGetImage = (
  projectId: string,
  imageId: string,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<ProjectImageOut>> => {
  return axios.default.get(
    `/api/commander/projects/${projectId}/images/${imageId}`,
    options,
  );
};

export const getCorporaCommanderApiImagesGetImageQueryKey = (
  projectId: string,
  imageId: string,
) => {
  return [`/api/commander/projects/${projectId}/images/${imageId}`] as const;
};

export const getCorporaCommanderApiImagesGetImageQueryOptions = <
  TData = Awaited<ReturnType<typeof corporaCommanderApiImagesGetImage>>,
  TError = AxiosError<unknown>,
>(
  projectId: string,
  imageId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof corporaCommanderApiImagesGetImage>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getCorporaCommanderApiImagesGetImageQueryKey(projectId, imageId);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof corporaCommanderApiImagesGetImage>>
  > = ({ signal }) =>
    corporaCommanderApiImagesGetImage(projectId, imageId, {
      signal,
      ...axiosOptions,
    });

  return {
    queryKey,
    queryFn,
    enabled: !!(projectId && imageId),
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof corporaCommanderApiImagesGetImage>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type CorporaCommanderApiImagesGetImageQueryResult = NonNullable<
  Awaited<ReturnType<typeof corporaCommanderApiImagesGetImage>>
>;
export type CorporaCommanderApiImagesGetImageQueryError = AxiosError<unknown>;

export function useCorporaCommanderApiImagesGetImage<
  TData = Awaited<ReturnType<typeof corporaCommanderApiImagesGetImage>>,
  TError = AxiosError<unknown>,
>(
  projectId: string,
  imageId: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof corporaCommanderApiImagesGetImage>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof corporaCommanderApiImagesGetImage>>,
          TError,
          Awaited<ReturnType<typeof corporaCommanderApiImagesGetImage>>
        >,
        "initialData"
      >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useCorporaCommanderApiImagesGetImage<
  TData = Awaited<ReturnType<typeof corporaCommanderApiImagesGetImage>>,
  TError = AxiosError<unknown>,
>(
  projectId: string,
  imageId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof corporaCommanderApiImagesGetImage>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof corporaCommanderApiImagesGetImage>>,
          TError,
          Awaited<ReturnType<typeof corporaCommanderApiImagesGetImage>>
        >,
        "initialData"
      >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useCorporaCommanderApiImagesGetImage<
  TData = Awaited<ReturnType<typeof corporaCommanderApiImagesGetImage>>,
  TError = AxiosError<unknown>,
>(
  projectId: string,
  imageId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof corporaCommanderApiImagesGetImage>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get Image
 */

export function useCorporaCommanderApiImagesGetImage<
  TData = Awaited<ReturnType<typeof corporaCommanderApiImagesGetImage>>,
  TError = AxiosError<unknown>,
>(
  projectId: string,
  imageId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof corporaCommanderApiImagesGetImage>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getCorporaCommanderApiImagesGetImageQueryOptions(
    projectId,
    imageId,
    options,
  );

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Update Image
 */
export const corporaCommanderApiImagesUpdateImage = (
  projectId: string,
  imageId: string,
  projectImageUpdate: ProjectImageUpdate,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<ProjectImageOut>> => {
  return axios.default.patch(
    `/api/commander/projects/${projectId}/images/${imageId}`,
    projectImageUpdate,
    options,
  );
};

export const getCorporaCommanderApiImagesUpdateImageMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof corporaCommanderApiImagesUpdateImage>>,
    TError,
    { projectId: string; imageId: string; data: ProjectImageUpdate },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof corporaCommanderApiImagesUpdateImage>>,
  TError,
  { projectId: string; imageId: string; data: ProjectImageUpdate },
  TContext
> => {
  const mutationKey = ["corporaCommanderApiImagesUpdateImage"];
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof corporaCommanderApiImagesUpdateImage>>,
    { projectId: string; imageId: string; data: ProjectImageUpdate }
  > = (props) => {
    const { projectId, imageId, data } = props ?? {};

    return corporaCommanderApiImagesUpdateImage(
      projectId,
      imageId,
      data,
      axiosOptions,
    );
  };

  return { mutationFn, ...mutationOptions };
};

export type CorporaCommanderApiImagesUpdateImageMutationResult = NonNullable<
  Awaited<ReturnType<typeof corporaCommanderApiImagesUpdateImage>>
>;
export type CorporaCommanderApiImagesUpdateImageMutationBody =
  ProjectImageUpdate;
export type CorporaCommanderApiImagesUpdateImageMutationError =
  AxiosError<unknown>;

/**
 * @summary Update Image
 */
export const useCorporaCommanderApiImagesUpdateImage = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof corporaCommanderApiImagesUpdateImage>>,
      TError,
      { projectId: string; imageId: string; data: ProjectImageUpdate },
      TContext
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof corporaCommanderApiImagesUpdateImage>>,
  TError,
  { projectId: string; imageId: string; data: ProjectImageUpdate },
  TContext
> => {
  const mutationOptions =
    getCorporaCommanderApiImagesUpdateImageMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Delete Image
 */
export const corporaCommanderApiImagesDeleteImage = (
  projectId: string,
  imageId: string,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<void>> => {
  return axios.default.delete(
    `/api/commander/projects/${projectId}/images/${imageId}`,
    options,
  );
};

export const getCorporaCommanderApiImagesDeleteImageMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof corporaCommanderApiImagesDeleteImage>>,
    TError,
    { projectId: string; imageId: string },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof corporaCommanderApiImagesDeleteImage>>,
  TError,
  { projectId: string; imageId: string },
  TContext
> => {
  const mutationKey = ["corporaCommanderApiImagesDeleteImage"];
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof corporaCommanderApiImagesDeleteImage>>,
    { projectId: string; imageId: string }
  > = (props) => {
    const { projectId, imageId } = props ?? {};

    return corporaCommanderApiImagesDeleteImage(
      projectId,
      imageId,
      axiosOptions,
    );
  };

  return { mutationFn, ...mutationOptions };
};

export type CorporaCommanderApiImagesDeleteImageMutationResult = NonNullable<
  Awaited<ReturnType<typeof corporaCommanderApiImagesDeleteImage>>
>;

export type CorporaCommanderApiImagesDeleteImageMutationError =
  AxiosError<unknown>;

/**
 * @summary Delete Image
 */
export const useCorporaCommanderApiImagesDeleteImage = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof corporaCommanderApiImagesDeleteImage>>,
      TError,
      { projectId: string; imageId: string },
      TContext
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof corporaCommanderApiImagesDeleteImage>>,
  TError,
  { projectId: string; imageId: string },
  TContext
> => {
  const mutationOptions =
    getCorporaCommanderApiImagesDeleteImageMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary List Image Tokens
 */
export const corporaCommanderApiImagesListImageTokens = (
  projectId: string,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<ImageToken[]>> => {
  return axios.default.get(
    `/api/commander/projects/${projectId}/image-tokens/`,
    options,
  );
};

export const getCorporaCommanderApiImagesListImageTokensQueryKey = (
  projectId: string,
) => {
  return [`/api/commander/projects/${projectId}/image-tokens/`] as const;
};

export const getCorporaCommanderApiImagesListImageTokensQueryOptions = <
  TData = Awaited<ReturnType<typeof corporaCommanderApiImagesListImageTokens>>,
  TError = AxiosError<unknown>,
>(
  projectId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof corporaCommanderApiImagesListImageTokens>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getCorporaCommanderApiImagesListImageTokensQueryKey(projectId);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof corporaCommanderApiImagesListImageTokens>>
  > = ({ signal }) =>
    corporaCommanderApiImagesListImageTokens(projectId, {
      signal,
      ...axiosOptions,
    });

  return {
    queryKey,
    queryFn,
    enabled: !!projectId,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof corporaCommanderApiImagesListImageTokens>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type CorporaCommanderApiImagesListImageTokensQueryResult = NonNullable<
  Awaited<ReturnType<typeof corporaCommanderApiImagesListImageTokens>>
>;
export type CorporaCommanderApiImagesListImageTokensQueryError =
  AxiosError<unknown>;

export function useCorporaCommanderApiImagesListImageTokens<
  TData = Awaited<ReturnType<typeof corporaCommanderApiImagesListImageTokens>>,
  TError = AxiosError<unknown>,
>(
  projectId: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof corporaCommanderApiImagesListImageTokens>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof corporaCommanderApiImagesListImageTokens>>,
          TError,
          Awaited<ReturnType<typeof corporaCommanderApiImagesListImageTokens>>
        >,
        "initialData"
      >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useCorporaCommanderApiImagesListImageTokens<
  TData = Awaited<ReturnType<typeof corporaCommanderApiImagesListImageTokens>>,
  TError = AxiosError<unknown>,
>(
  projectId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof corporaCommanderApiImagesListImageTokens>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof corporaCommanderApiImagesListImageTokens>>,
          TError,
          Awaited<ReturnType<typeof corporaCommanderApiImagesListImageTokens>>
        >,
        "initialData"
      >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useCorporaCommanderApiImagesListImageTokens<
  TData = Awaited<ReturnType<typeof corporaCommanderApiImagesListImageTokens>>,
  TError = AxiosError<unknown>,
>(
  projectId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof corporaCommanderApiImagesListImageTokens>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary List Image Tokens
 */

export function useCorporaCommanderApiImagesListImageTokens<
  TData = Awaited<ReturnType<typeof corporaCommanderApiImagesListImageTokens>>,
  TError = AxiosError<unknown>,
>(
  projectId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof corporaCommanderApiImagesListImageTokens>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getCorporaCommanderApiImagesListImageTokensQueryOptions(
    projectId,
    options,
  );

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}
