/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * Corpora API
 * API for managing and processing corpora
 * OpenAPI spec version: 0.1.0
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";

import * as axios from "axios";
import type { AxiosError, AxiosRequestConfig, AxiosResponse } from "axios";

import type {
  CompletionRequest,
  CompletionResponse,
  CorporaCommanderApiLlmGenericDataCompletion200,
  GenericCompletionRequest,
  LMStudioPing,
  OpenAIModelsRequest,
  ProjectIn,
  ProjectOut,
  ProjectUpdate,
  SectionIn,
  SectionOut,
  SectionUpdate,
  XAIModelsRequest,
  XAIModelsResponse,
} from ".././schemas";

/**
 * @summary Text Completion
 */
export const corporaCommanderApiOnboardingTextCompletion = (
  completionRequest: CompletionRequest,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<CompletionResponse>> => {
  return axios.default.post(
    `/api/commander/complete`,
    completionRequest,
    options,
  );
};

export const getCorporaCommanderApiOnboardingTextCompletionMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof corporaCommanderApiOnboardingTextCompletion>>,
    TError,
    { data: CompletionRequest },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof corporaCommanderApiOnboardingTextCompletion>>,
  TError,
  { data: CompletionRequest },
  TContext
> => {
  const mutationKey = ["corporaCommanderApiOnboardingTextCompletion"];
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof corporaCommanderApiOnboardingTextCompletion>>,
    { data: CompletionRequest }
  > = (props) => {
    const { data } = props ?? {};

    return corporaCommanderApiOnboardingTextCompletion(data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type CorporaCommanderApiOnboardingTextCompletionMutationResult =
  NonNullable<
    Awaited<ReturnType<typeof corporaCommanderApiOnboardingTextCompletion>>
  >;
export type CorporaCommanderApiOnboardingTextCompletionMutationBody =
  CompletionRequest;
export type CorporaCommanderApiOnboardingTextCompletionMutationError =
  AxiosError<unknown>;

/**
 * @summary Text Completion
 */
export const useCorporaCommanderApiOnboardingTextCompletion = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof corporaCommanderApiOnboardingTextCompletion>>,
      TError,
      { data: CompletionRequest },
      TContext
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof corporaCommanderApiOnboardingTextCompletion>>,
  TError,
  { data: CompletionRequest },
  TContext
> => {
  const mutationOptions =
    getCorporaCommanderApiOnboardingTextCompletionMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * Fetch the list of model names from LM Studio.
 * @summary List Lmstudio Models
 */
export const corporaCommanderApiOnboardingListLmstudioModels = (
  lMStudioPing: LMStudioPing,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<void>> => {
  return axios.default.post(
    `/api/commander/lmstudio/models`,
    lMStudioPing,
    options,
  );
};

export const getCorporaCommanderApiOnboardingListLmstudioModelsMutationOptions =
  <TError = AxiosError<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
      Awaited<
        ReturnType<typeof corporaCommanderApiOnboardingListLmstudioModels>
      >,
      TError,
      { data: LMStudioPing },
      TContext
    >;
    axios?: AxiosRequestConfig;
  }): UseMutationOptions<
    Awaited<
      ReturnType<typeof corporaCommanderApiOnboardingListLmstudioModels>
    >,
    TError,
    { data: LMStudioPing },
    TContext
  > => {
    const mutationKey = ["corporaCommanderApiOnboardingListLmstudioModels"];
    const { mutation: mutationOptions, axios: axiosOptions } = options
      ? options.mutation &&
        "mutationKey" in options.mutation &&
        options.mutation.mutationKey
        ? options
        : { ...options, mutation: { ...options.mutation, mutationKey } }
      : { mutation: { mutationKey }, axios: undefined };

    const mutationFn: MutationFunction<
      Awaited<
        ReturnType<typeof corporaCommanderApiOnboardingListLmstudioModels>
      >,
      { data: LMStudioPing }
    > = (props) => {
      const { data } = props ?? {};

      return corporaCommanderApiOnboardingListLmstudioModels(
        data,
        axiosOptions,
      );
    };

    return { mutationFn, ...mutationOptions };
  };

export type CorporaCommanderApiOnboardingListLmstudioModelsMutationResult =
  NonNullable<
    Awaited<ReturnType<typeof corporaCommanderApiOnboardingListLmstudioModels>>
  >;
export type CorporaCommanderApiOnboardingListLmstudioModelsMutationBody =
  LMStudioPing;
export type CorporaCommanderApiOnboardingListLmstudioModelsMutationError =
  AxiosError<unknown>;

/**
 * @summary List Lmstudio Models
 */
export const useCorporaCommanderApiOnboardingListLmstudioModels = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<
        ReturnType<typeof corporaCommanderApiOnboardingListLmstudioModels>
      >,
      TError,
      { data: LMStudioPing },
      TContext
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof corporaCommanderApiOnboardingListLmstudioModels>>,
  TError,
  { data: LMStudioPing },
  TContext
> => {
  const mutationOptions =
    getCorporaCommanderApiOnboardingListLmstudioModelsMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * Fetch the list of available OpenAI model IDs.
If `api_key` is provided in the request body, it overrides the
OPENAI_API_KEY environment variable for this call.
 * @summary List Openai Models
 */
export const corporaCommanderApiOnboardingListOpenaiModels = (
  openAIModelsRequest: OpenAIModelsRequest,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<void>> => {
  return axios.default.post(
    `/api/commander/openai/models`,
    openAIModelsRequest,
    options,
  );
};

export const getCorporaCommanderApiOnboardingListOpenaiModelsMutationOptions =
  <TError = AxiosError<unknown>, TContext = unknown>(options?: {
    mutation?: UseMutationOptions<
      Awaited<
        ReturnType<typeof corporaCommanderApiOnboardingListOpenaiModels>
      >,
      TError,
      { data: OpenAIModelsRequest },
      TContext
    >;
    axios?: AxiosRequestConfig;
  }): UseMutationOptions<
    Awaited<ReturnType<typeof corporaCommanderApiOnboardingListOpenaiModels>>,
    TError,
    { data: OpenAIModelsRequest },
    TContext
  > => {
    const mutationKey = ["corporaCommanderApiOnboardingListOpenaiModels"];
    const { mutation: mutationOptions, axios: axiosOptions } = options
      ? options.mutation &&
        "mutationKey" in options.mutation &&
        options.mutation.mutationKey
        ? options
        : { ...options, mutation: { ...options.mutation, mutationKey } }
      : { mutation: { mutationKey }, axios: undefined };

    const mutationFn: MutationFunction<
      Awaited<
        ReturnType<typeof corporaCommanderApiOnboardingListOpenaiModels>
      >,
      { data: OpenAIModelsRequest }
    > = (props) => {
      const { data } = props ?? {};

      return corporaCommanderApiOnboardingListOpenaiModels(data, axiosOptions);
    };

    return { mutationFn, ...mutationOptions };
  };

export type CorporaCommanderApiOnboardingListOpenaiModelsMutationResult =
  NonNullable<
    Awaited<ReturnType<typeof corporaCommanderApiOnboardingListOpenaiModels>>
  >;
export type CorporaCommanderApiOnboardingListOpenaiModelsMutationBody =
  OpenAIModelsRequest;
export type CorporaCommanderApiOnboardingListOpenaiModelsMutationError =
  AxiosError<unknown>;

/**
 * @summary List Openai Models
 */
export const useCorporaCommanderApiOnboardingListOpenaiModels = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<
        ReturnType<typeof corporaCommanderApiOnboardingListOpenaiModels>
      >,
      TError,
      { data: OpenAIModelsRequest },
      TContext
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof corporaCommanderApiOnboardingListOpenaiModels>>,
  TError,
  { data: OpenAIModelsRequest },
  TContext
> => {
  const mutationOptions =
    getCorporaCommanderApiOnboardingListOpenaiModelsMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * Fetch the list of available xAI Grok model IDs via GET /v1/models.
 * @summary List Xai Models
 */
export const corporaCommanderApiOnboardingListXaiModels = (
  xAIModelsRequest: XAIModelsRequest,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<XAIModelsResponse>> => {
  return axios.default.post(
    `/api/commander/xai/models`,
    xAIModelsRequest,
    options,
  );
};

export const getCorporaCommanderApiOnboardingListXaiModelsMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof corporaCommanderApiOnboardingListXaiModels>>,
    TError,
    { data: XAIModelsRequest },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof corporaCommanderApiOnboardingListXaiModels>>,
  TError,
  { data: XAIModelsRequest },
  TContext
> => {
  const mutationKey = ["corporaCommanderApiOnboardingListXaiModels"];
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof corporaCommanderApiOnboardingListXaiModels>>,
    { data: XAIModelsRequest }
  > = (props) => {
    const { data } = props ?? {};

    return corporaCommanderApiOnboardingListXaiModels(data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type CorporaCommanderApiOnboardingListXaiModelsMutationResult =
  NonNullable<
    Awaited<ReturnType<typeof corporaCommanderApiOnboardingListXaiModels>>
  >;
export type CorporaCommanderApiOnboardingListXaiModelsMutationBody =
  XAIModelsRequest;
export type CorporaCommanderApiOnboardingListXaiModelsMutationError =
  AxiosError<unknown>;

/**
 * @summary List Xai Models
 */
export const useCorporaCommanderApiOnboardingListXaiModels = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof corporaCommanderApiOnboardingListXaiModels>>,
      TError,
      { data: XAIModelsRequest },
      TContext
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof corporaCommanderApiOnboardingListXaiModels>>,
  TError,
  { data: XAIModelsRequest },
  TContext
> => {
  const mutationOptions =
    getCorporaCommanderApiOnboardingListXaiModelsMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * Return all projects, most recent first.
 * @summary List Projects
 */
export const corporaCommanderApiProjectListProjects = (
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<ProjectOut[]>> => {
  return axios.default.get(`/api/commander/projects/`, options);
};

export const getCorporaCommanderApiProjectListProjectsQueryKey = () => {
  return [`/api/commander/projects/`] as const;
};

export const getCorporaCommanderApiProjectListProjectsQueryOptions = <
  TData = Awaited<ReturnType<typeof corporaCommanderApiProjectListProjects>>,
  TError = AxiosError<unknown>,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof corporaCommanderApiProjectListProjects>>,
      TError,
      TData
    >
  >;
  axios?: AxiosRequestConfig;
}) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getCorporaCommanderApiProjectListProjectsQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof corporaCommanderApiProjectListProjects>>
  > = ({ signal }) =>
    corporaCommanderApiProjectListProjects({ signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof corporaCommanderApiProjectListProjects>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type CorporaCommanderApiProjectListProjectsQueryResult = NonNullable<
  Awaited<ReturnType<typeof corporaCommanderApiProjectListProjects>>
>;
export type CorporaCommanderApiProjectListProjectsQueryError =
  AxiosError<unknown>;

export function useCorporaCommanderApiProjectListProjects<
  TData = Awaited<ReturnType<typeof corporaCommanderApiProjectListProjects>>,
  TError = AxiosError<unknown>,
>(
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof corporaCommanderApiProjectListProjects>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof corporaCommanderApiProjectListProjects>>,
          TError,
          Awaited<ReturnType<typeof corporaCommanderApiProjectListProjects>>
        >,
        "initialData"
      >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useCorporaCommanderApiProjectListProjects<
  TData = Awaited<ReturnType<typeof corporaCommanderApiProjectListProjects>>,
  TError = AxiosError<unknown>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof corporaCommanderApiProjectListProjects>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof corporaCommanderApiProjectListProjects>>,
          TError,
          Awaited<ReturnType<typeof corporaCommanderApiProjectListProjects>>
        >,
        "initialData"
      >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useCorporaCommanderApiProjectListProjects<
  TData = Awaited<ReturnType<typeof corporaCommanderApiProjectListProjects>>,
  TError = AxiosError<unknown>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof corporaCommanderApiProjectListProjects>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary List Projects
 */

export function useCorporaCommanderApiProjectListProjects<
  TData = Awaited<ReturnType<typeof corporaCommanderApiProjectListProjects>>,
  TError = AxiosError<unknown>,
>(
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof corporaCommanderApiProjectListProjects>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions =
    getCorporaCommanderApiProjectListProjectsQueryOptions(options);

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Create a new project with the given metadata.
 * @summary Create Project
 */
export const corporaCommanderApiProjectCreateProject = (
  projectIn: ProjectIn,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<ProjectOut>> => {
  return axios.default.post(`/api/commander/projects/`, projectIn, options);
};

export const getCorporaCommanderApiProjectCreateProjectMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof corporaCommanderApiProjectCreateProject>>,
    TError,
    { data: ProjectIn },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof corporaCommanderApiProjectCreateProject>>,
  TError,
  { data: ProjectIn },
  TContext
> => {
  const mutationKey = ["corporaCommanderApiProjectCreateProject"];
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof corporaCommanderApiProjectCreateProject>>,
    { data: ProjectIn }
  > = (props) => {
    const { data } = props ?? {};

    return corporaCommanderApiProjectCreateProject(data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type CorporaCommanderApiProjectCreateProjectMutationResult =
  NonNullable<
    Awaited<ReturnType<typeof corporaCommanderApiProjectCreateProject>>
  >;
export type CorporaCommanderApiProjectCreateProjectMutationBody = ProjectIn;
export type CorporaCommanderApiProjectCreateProjectMutationError =
  AxiosError<unknown>;

/**
 * @summary Create Project
 */
export const useCorporaCommanderApiProjectCreateProject = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof corporaCommanderApiProjectCreateProject>>,
      TError,
      { data: ProjectIn },
      TContext
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof corporaCommanderApiProjectCreateProject>>,
  TError,
  { data: ProjectIn },
  TContext
> => {
  const mutationOptions =
    getCorporaCommanderApiProjectCreateProjectMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * Retrieve a single project by its ID.
 * @summary Get Project
 */
export const corporaCommanderApiProjectGetProject = (
  projectId: string,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<ProjectOut>> => {
  return axios.default.get(`/api/commander/projects/${projectId}`, options);
};

export const getCorporaCommanderApiProjectGetProjectQueryKey = (
  projectId: string,
) => {
  return [`/api/commander/projects/${projectId}`] as const;
};

export const getCorporaCommanderApiProjectGetProjectQueryOptions = <
  TData = Awaited<ReturnType<typeof corporaCommanderApiProjectGetProject>>,
  TError = AxiosError<unknown>,
>(
  projectId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof corporaCommanderApiProjectGetProject>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getCorporaCommanderApiProjectGetProjectQueryKey(projectId);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof corporaCommanderApiProjectGetProject>>
  > = ({ signal }) =>
    corporaCommanderApiProjectGetProject(projectId, {
      signal,
      ...axiosOptions,
    });

  return {
    queryKey,
    queryFn,
    enabled: !!projectId,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof corporaCommanderApiProjectGetProject>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type CorporaCommanderApiProjectGetProjectQueryResult = NonNullable<
  Awaited<ReturnType<typeof corporaCommanderApiProjectGetProject>>
>;
export type CorporaCommanderApiProjectGetProjectQueryError =
  AxiosError<unknown>;

export function useCorporaCommanderApiProjectGetProject<
  TData = Awaited<ReturnType<typeof corporaCommanderApiProjectGetProject>>,
  TError = AxiosError<unknown>,
>(
  projectId: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof corporaCommanderApiProjectGetProject>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof corporaCommanderApiProjectGetProject>>,
          TError,
          Awaited<ReturnType<typeof corporaCommanderApiProjectGetProject>>
        >,
        "initialData"
      >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useCorporaCommanderApiProjectGetProject<
  TData = Awaited<ReturnType<typeof corporaCommanderApiProjectGetProject>>,
  TError = AxiosError<unknown>,
>(
  projectId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof corporaCommanderApiProjectGetProject>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof corporaCommanderApiProjectGetProject>>,
          TError,
          Awaited<ReturnType<typeof corporaCommanderApiProjectGetProject>>
        >,
        "initialData"
      >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useCorporaCommanderApiProjectGetProject<
  TData = Awaited<ReturnType<typeof corporaCommanderApiProjectGetProject>>,
  TError = AxiosError<unknown>,
>(
  projectId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof corporaCommanderApiProjectGetProject>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get Project
 */

export function useCorporaCommanderApiProjectGetProject<
  TData = Awaited<ReturnType<typeof corporaCommanderApiProjectGetProject>>,
  TError = AxiosError<unknown>,
>(
  projectId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof corporaCommanderApiProjectGetProject>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getCorporaCommanderApiProjectGetProjectQueryOptions(
    projectId,
    options,
  );

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * Update the given fields on a project.
 * @summary Update Project
 */
export const corporaCommanderApiProjectUpdateProject = (
  projectId: string,
  projectUpdate: ProjectUpdate,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<ProjectOut>> => {
  return axios.default.put(
    `/api/commander/projects/${projectId}`,
    projectUpdate,
    options,
  );
};

export const getCorporaCommanderApiProjectUpdateProjectMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof corporaCommanderApiProjectUpdateProject>>,
    TError,
    { projectId: string; data: ProjectUpdate },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof corporaCommanderApiProjectUpdateProject>>,
  TError,
  { projectId: string; data: ProjectUpdate },
  TContext
> => {
  const mutationKey = ["corporaCommanderApiProjectUpdateProject"];
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof corporaCommanderApiProjectUpdateProject>>,
    { projectId: string; data: ProjectUpdate }
  > = (props) => {
    const { projectId, data } = props ?? {};

    return corporaCommanderApiProjectUpdateProject(
      projectId,
      data,
      axiosOptions,
    );
  };

  return { mutationFn, ...mutationOptions };
};

export type CorporaCommanderApiProjectUpdateProjectMutationResult =
  NonNullable<
    Awaited<ReturnType<typeof corporaCommanderApiProjectUpdateProject>>
  >;
export type CorporaCommanderApiProjectUpdateProjectMutationBody =
  ProjectUpdate;
export type CorporaCommanderApiProjectUpdateProjectMutationError =
  AxiosError<unknown>;

/**
 * @summary Update Project
 */
export const useCorporaCommanderApiProjectUpdateProject = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof corporaCommanderApiProjectUpdateProject>>,
      TError,
      { projectId: string; data: ProjectUpdate },
      TContext
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof corporaCommanderApiProjectUpdateProject>>,
  TError,
  { projectId: string; data: ProjectUpdate },
  TContext
> => {
  const mutationOptions =
    getCorporaCommanderApiProjectUpdateProjectMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * Delete a project.
 * @summary Delete Project
 */
export const corporaCommanderApiProjectDeleteProject = (
  projectId: string,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<void>> => {
  return axios.default.delete(`/api/commander/projects/${projectId}`, options);
};

export const getCorporaCommanderApiProjectDeleteProjectMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof corporaCommanderApiProjectDeleteProject>>,
    TError,
    { projectId: string },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof corporaCommanderApiProjectDeleteProject>>,
  TError,
  { projectId: string },
  TContext
> => {
  const mutationKey = ["corporaCommanderApiProjectDeleteProject"];
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof corporaCommanderApiProjectDeleteProject>>,
    { projectId: string }
  > = (props) => {
    const { projectId } = props ?? {};

    return corporaCommanderApiProjectDeleteProject(projectId, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type CorporaCommanderApiProjectDeleteProjectMutationResult =
  NonNullable<
    Awaited<ReturnType<typeof corporaCommanderApiProjectDeleteProject>>
  >;

export type CorporaCommanderApiProjectDeleteProjectMutationError =
  AxiosError<unknown>;

/**
 * @summary Delete Project
 */
export const useCorporaCommanderApiProjectDeleteProject = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof corporaCommanderApiProjectDeleteProject>>,
      TError,
      { projectId: string },
      TContext
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof corporaCommanderApiProjectDeleteProject>>,
  TError,
  { projectId: string },
  TContext
> => {
  const mutationOptions =
    getCorporaCommanderApiProjectDeleteProjectMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * Dynamically build a Pydantic model from `schema`, invoke the LLM,
and return a dict matching that schema.
 * @summary Generic Data Completion
 */
export const corporaCommanderApiLlmGenericDataCompletion = (
  genericCompletionRequest: GenericCompletionRequest,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<CorporaCommanderApiLlmGenericDataCompletion200>> => {
  return axios.default.post(
    `/api/commander/generic/complete`,
    genericCompletionRequest,
    options,
  );
};

export const getCorporaCommanderApiLlmGenericDataCompletionMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof corporaCommanderApiLlmGenericDataCompletion>>,
    TError,
    { data: GenericCompletionRequest },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof corporaCommanderApiLlmGenericDataCompletion>>,
  TError,
  { data: GenericCompletionRequest },
  TContext
> => {
  const mutationKey = ["corporaCommanderApiLlmGenericDataCompletion"];
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof corporaCommanderApiLlmGenericDataCompletion>>,
    { data: GenericCompletionRequest }
  > = (props) => {
    const { data } = props ?? {};

    return corporaCommanderApiLlmGenericDataCompletion(data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type CorporaCommanderApiLlmGenericDataCompletionMutationResult =
  NonNullable<
    Awaited<ReturnType<typeof corporaCommanderApiLlmGenericDataCompletion>>
  >;
export type CorporaCommanderApiLlmGenericDataCompletionMutationBody =
  GenericCompletionRequest;
export type CorporaCommanderApiLlmGenericDataCompletionMutationError =
  AxiosError<unknown>;

/**
 * @summary Generic Data Completion
 */
export const useCorporaCommanderApiLlmGenericDataCompletion = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof corporaCommanderApiLlmGenericDataCompletion>>,
      TError,
      { data: GenericCompletionRequest },
      TContext
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof corporaCommanderApiLlmGenericDataCompletion>>,
  TError,
  { data: GenericCompletionRequest },
  TContext
> => {
  const mutationOptions =
    getCorporaCommanderApiLlmGenericDataCompletionMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary List Sections
 */
export const corporaCommanderApiSectionListSections = (
  projectId: string,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<SectionOut[]>> => {
  return axios.default.get(
    `/api/commander/projects/${projectId}/sections`,
    options,
  );
};

export const getCorporaCommanderApiSectionListSectionsQueryKey = (
  projectId: string,
) => {
  return [`/api/commander/projects/${projectId}/sections`] as const;
};

export const getCorporaCommanderApiSectionListSectionsQueryOptions = <
  TData = Awaited<ReturnType<typeof corporaCommanderApiSectionListSections>>,
  TError = AxiosError<unknown>,
>(
  projectId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof corporaCommanderApiSectionListSections>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getCorporaCommanderApiSectionListSectionsQueryKey(projectId);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof corporaCommanderApiSectionListSections>>
  > = ({ signal }) =>
    corporaCommanderApiSectionListSections(projectId, {
      signal,
      ...axiosOptions,
    });

  return {
    queryKey,
    queryFn,
    enabled: !!projectId,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof corporaCommanderApiSectionListSections>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type CorporaCommanderApiSectionListSectionsQueryResult = NonNullable<
  Awaited<ReturnType<typeof corporaCommanderApiSectionListSections>>
>;
export type CorporaCommanderApiSectionListSectionsQueryError =
  AxiosError<unknown>;

export function useCorporaCommanderApiSectionListSections<
  TData = Awaited<ReturnType<typeof corporaCommanderApiSectionListSections>>,
  TError = AxiosError<unknown>,
>(
  projectId: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof corporaCommanderApiSectionListSections>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof corporaCommanderApiSectionListSections>>,
          TError,
          Awaited<ReturnType<typeof corporaCommanderApiSectionListSections>>
        >,
        "initialData"
      >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useCorporaCommanderApiSectionListSections<
  TData = Awaited<ReturnType<typeof corporaCommanderApiSectionListSections>>,
  TError = AxiosError<unknown>,
>(
  projectId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof corporaCommanderApiSectionListSections>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof corporaCommanderApiSectionListSections>>,
          TError,
          Awaited<ReturnType<typeof corporaCommanderApiSectionListSections>>
        >,
        "initialData"
      >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useCorporaCommanderApiSectionListSections<
  TData = Awaited<ReturnType<typeof corporaCommanderApiSectionListSections>>,
  TError = AxiosError<unknown>,
>(
  projectId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof corporaCommanderApiSectionListSections>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary List Sections
 */

export function useCorporaCommanderApiSectionListSections<
  TData = Awaited<ReturnType<typeof corporaCommanderApiSectionListSections>>,
  TError = AxiosError<unknown>,
>(
  projectId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof corporaCommanderApiSectionListSections>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getCorporaCommanderApiSectionListSectionsQueryOptions(
    projectId,
    options,
  );

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Create Section
 */
export const corporaCommanderApiSectionCreateSection = (
  projectId: string,
  sectionIn: SectionIn,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<SectionOut>> => {
  return axios.default.post(
    `/api/commander/projects/${projectId}/sections`,
    sectionIn,
    options,
  );
};

export const getCorporaCommanderApiSectionCreateSectionMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof corporaCommanderApiSectionCreateSection>>,
    TError,
    { projectId: string; data: SectionIn },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof corporaCommanderApiSectionCreateSection>>,
  TError,
  { projectId: string; data: SectionIn },
  TContext
> => {
  const mutationKey = ["corporaCommanderApiSectionCreateSection"];
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof corporaCommanderApiSectionCreateSection>>,
    { projectId: string; data: SectionIn }
  > = (props) => {
    const { projectId, data } = props ?? {};

    return corporaCommanderApiSectionCreateSection(
      projectId,
      data,
      axiosOptions,
    );
  };

  return { mutationFn, ...mutationOptions };
};

export type CorporaCommanderApiSectionCreateSectionMutationResult =
  NonNullable<
    Awaited<ReturnType<typeof corporaCommanderApiSectionCreateSection>>
  >;
export type CorporaCommanderApiSectionCreateSectionMutationBody = SectionIn;
export type CorporaCommanderApiSectionCreateSectionMutationError =
  AxiosError<unknown>;

/**
 * @summary Create Section
 */
export const useCorporaCommanderApiSectionCreateSection = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof corporaCommanderApiSectionCreateSection>>,
      TError,
      { projectId: string; data: SectionIn },
      TContext
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof corporaCommanderApiSectionCreateSection>>,
  TError,
  { projectId: string; data: SectionIn },
  TContext
> => {
  const mutationOptions =
    getCorporaCommanderApiSectionCreateSectionMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Get Section
 */
export const corporaCommanderApiSectionGetSection = (
  sectionId: string,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<SectionOut>> => {
  return axios.default.get(`/api/commander/sections/${sectionId}`, options);
};

export const getCorporaCommanderApiSectionGetSectionQueryKey = (
  sectionId: string,
) => {
  return [`/api/commander/sections/${sectionId}`] as const;
};

export const getCorporaCommanderApiSectionGetSectionQueryOptions = <
  TData = Awaited<ReturnType<typeof corporaCommanderApiSectionGetSection>>,
  TError = AxiosError<unknown>,
>(
  sectionId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof corporaCommanderApiSectionGetSection>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
) => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getCorporaCommanderApiSectionGetSectionQueryKey(sectionId);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof corporaCommanderApiSectionGetSection>>
  > = ({ signal }) =>
    corporaCommanderApiSectionGetSection(sectionId, {
      signal,
      ...axiosOptions,
    });

  return {
    queryKey,
    queryFn,
    enabled: !!sectionId,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof corporaCommanderApiSectionGetSection>>,
    TError,
    TData
  > & { queryKey: DataTag<QueryKey, TData, TError> };
};

export type CorporaCommanderApiSectionGetSectionQueryResult = NonNullable<
  Awaited<ReturnType<typeof corporaCommanderApiSectionGetSection>>
>;
export type CorporaCommanderApiSectionGetSectionQueryError =
  AxiosError<unknown>;

export function useCorporaCommanderApiSectionGetSection<
  TData = Awaited<ReturnType<typeof corporaCommanderApiSectionGetSection>>,
  TError = AxiosError<unknown>,
>(
  sectionId: string,
  options: {
    query: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof corporaCommanderApiSectionGetSection>>,
        TError,
        TData
      >
    > &
      Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof corporaCommanderApiSectionGetSection>>,
          TError,
          Awaited<ReturnType<typeof corporaCommanderApiSectionGetSection>>
        >,
        "initialData"
      >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): DefinedUseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useCorporaCommanderApiSectionGetSection<
  TData = Awaited<ReturnType<typeof corporaCommanderApiSectionGetSection>>,
  TError = AxiosError<unknown>,
>(
  sectionId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof corporaCommanderApiSectionGetSection>>,
        TError,
        TData
      >
    > &
      Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof corporaCommanderApiSectionGetSection>>,
          TError,
          Awaited<ReturnType<typeof corporaCommanderApiSectionGetSection>>
        >,
        "initialData"
      >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
export function useCorporaCommanderApiSectionGetSection<
  TData = Awaited<ReturnType<typeof corporaCommanderApiSectionGetSection>>,
  TError = AxiosError<unknown>,
>(
  sectionId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof corporaCommanderApiSectionGetSection>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
};
/**
 * @summary Get Section
 */

export function useCorporaCommanderApiSectionGetSection<
  TData = Awaited<ReturnType<typeof corporaCommanderApiSectionGetSection>>,
  TError = AxiosError<unknown>,
>(
  sectionId: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof corporaCommanderApiSectionGetSection>>,
        TError,
        TData
      >
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseQueryResult<TData, TError> & {
  queryKey: DataTag<QueryKey, TData, TError>;
} {
  const queryOptions = getCorporaCommanderApiSectionGetSectionQueryOptions(
    sectionId,
    options,
  );

  const query = useQuery(queryOptions, queryClient) as UseQueryResult<
    TData,
    TError
  > & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey;

  return query;
}

/**
 * @summary Update Section
 */
export const corporaCommanderApiSectionUpdateSection = (
  sectionId: string,
  sectionUpdate: SectionUpdate,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<SectionOut>> => {
  return axios.default.put(
    `/api/commander/sections/${sectionId}`,
    sectionUpdate,
    options,
  );
};

export const getCorporaCommanderApiSectionUpdateSectionMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof corporaCommanderApiSectionUpdateSection>>,
    TError,
    { sectionId: string; data: SectionUpdate },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof corporaCommanderApiSectionUpdateSection>>,
  TError,
  { sectionId: string; data: SectionUpdate },
  TContext
> => {
  const mutationKey = ["corporaCommanderApiSectionUpdateSection"];
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof corporaCommanderApiSectionUpdateSection>>,
    { sectionId: string; data: SectionUpdate }
  > = (props) => {
    const { sectionId, data } = props ?? {};

    return corporaCommanderApiSectionUpdateSection(
      sectionId,
      data,
      axiosOptions,
    );
  };

  return { mutationFn, ...mutationOptions };
};

export type CorporaCommanderApiSectionUpdateSectionMutationResult =
  NonNullable<
    Awaited<ReturnType<typeof corporaCommanderApiSectionUpdateSection>>
  >;
export type CorporaCommanderApiSectionUpdateSectionMutationBody =
  SectionUpdate;
export type CorporaCommanderApiSectionUpdateSectionMutationError =
  AxiosError<unknown>;

/**
 * @summary Update Section
 */
export const useCorporaCommanderApiSectionUpdateSection = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof corporaCommanderApiSectionUpdateSection>>,
      TError,
      { sectionId: string; data: SectionUpdate },
      TContext
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof corporaCommanderApiSectionUpdateSection>>,
  TError,
  { sectionId: string; data: SectionUpdate },
  TContext
> => {
  const mutationOptions =
    getCorporaCommanderApiSectionUpdateSectionMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
/**
 * @summary Delete Section
 */
export const corporaCommanderApiSectionDeleteSection = (
  sectionId: string,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<void>> => {
  return axios.default.delete(`/api/commander/sections/${sectionId}`, options);
};

export const getCorporaCommanderApiSectionDeleteSectionMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof corporaCommanderApiSectionDeleteSection>>,
    TError,
    { sectionId: string },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof corporaCommanderApiSectionDeleteSection>>,
  TError,
  { sectionId: string },
  TContext
> => {
  const mutationKey = ["corporaCommanderApiSectionDeleteSection"];
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof corporaCommanderApiSectionDeleteSection>>,
    { sectionId: string }
  > = (props) => {
    const { sectionId } = props ?? {};

    return corporaCommanderApiSectionDeleteSection(sectionId, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type CorporaCommanderApiSectionDeleteSectionMutationResult =
  NonNullable<
    Awaited<ReturnType<typeof corporaCommanderApiSectionDeleteSection>>
  >;

export type CorporaCommanderApiSectionDeleteSectionMutationError =
  AxiosError<unknown>;

/**
 * @summary Delete Section
 */
export const useCorporaCommanderApiSectionDeleteSection = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof corporaCommanderApiSectionDeleteSection>>,
      TError,
      { sectionId: string },
      TContext
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof corporaCommanderApiSectionDeleteSection>>,
  TError,
  { sectionId: string },
  TContext
> => {
  const mutationOptions =
    getCorporaCommanderApiSectionDeleteSectionMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
