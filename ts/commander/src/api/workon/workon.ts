/**
 * Generated by orval v7.10.0 üç∫
 * Do not edit manually.
 * Corpora API
 * API for managing and processing corpora
 * OpenAPI spec version: 0.1.0
 */
import { useMutation } from "@tanstack/react-query";
import type {
  MutationFunction,
  QueryClient,
  UseMutationOptions,
  UseMutationResult,
} from "@tanstack/react-query";

import * as axios from "axios";
import type { AxiosError, AxiosRequestConfig, AxiosResponse } from "axios";

import type { CorpusFileChatSchema } from ".././schemas";

/**
 * @summary File
 */
export const file = (
  corpusFileChatSchema: CorpusFileChatSchema,
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<string>> => {
  return axios.default.post(
    `/api/corpora/workon/file`,
    corpusFileChatSchema,
    options,
  );
};

export const getFileMutationOptions = <
  TError = AxiosError<unknown>,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof file>>,
    TError,
    { data: CorpusFileChatSchema },
    TContext
  >;
  axios?: AxiosRequestConfig;
}): UseMutationOptions<
  Awaited<ReturnType<typeof file>>,
  TError,
  { data: CorpusFileChatSchema },
  TContext
> => {
  const mutationKey = ["file"];
  const { mutation: mutationOptions, axios: axiosOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, axios: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof file>>,
    { data: CorpusFileChatSchema }
  > = (props) => {
    const { data } = props ?? {};

    return file(data, axiosOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type FileMutationResult = NonNullable<Awaited<ReturnType<typeof file>>>;
export type FileMutationBody = CorpusFileChatSchema;
export type FileMutationError = AxiosError<unknown>;

/**
 * @summary File
 */
export const useFile = <TError = AxiosError<unknown>, TContext = unknown>(
  options?: {
    mutation?: UseMutationOptions<
      Awaited<ReturnType<typeof file>>,
      TError,
      { data: CorpusFileChatSchema },
      TContext
    >;
    axios?: AxiosRequestConfig;
  },
  queryClient?: QueryClient,
): UseMutationResult<
  Awaited<ReturnType<typeof file>>,
  TError,
  { data: CorpusFileChatSchema },
  TContext
> => {
  const mutationOptions = getFileMutationOptions(options);

  return useMutation(mutationOptions, queryClient);
};
