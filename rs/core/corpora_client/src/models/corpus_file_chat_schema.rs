/*
 * Corpora API
 *
 * API for managing and processing corpora
 *
 * The version of the OpenAPI document: 0.1.0
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct CorpusFileChatSchema {
    #[serde(rename = "corpus_id")]
    pub corpus_id: String,
    #[serde(rename = "messages")]
    pub messages: Vec<models::MessageSchema>,
    #[serde(rename = "path")]
    pub path: String,
    #[serde(rename = "voice", skip_serializing_if = "Option::is_none")]
    pub voice: Option<String>,
    #[serde(rename = "purpose", skip_serializing_if = "Option::is_none")]
    pub purpose: Option<String>,
    #[serde(rename = "structure", skip_serializing_if = "Option::is_none")]
    pub structure: Option<String>,
    #[serde(rename = "directions", skip_serializing_if = "Option::is_none")]
    pub directions: Option<String>,
}

impl CorpusFileChatSchema {
    pub fn new(
        corpus_id: String,
        messages: Vec<models::MessageSchema>,
        path: String,
    ) -> CorpusFileChatSchema {
        CorpusFileChatSchema {
            corpus_id,
            messages,
            path,
            voice: None,
            purpose: None,
            structure: None,
            directions: None,
        }
    }
}
