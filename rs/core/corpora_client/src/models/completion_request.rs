/*
 * Corpora API
 *
 * API for managing and processing corpora
 *
 * The version of the OpenAPI document: 0.1.0
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct CompletionRequest {
    /// one of: openai, xai, local
    #[serde(rename = "provider")]
    pub provider: String,
    /// model name to use
    #[serde(rename = "model")]
    pub model: String,
    #[serde(
        rename = "base_url",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub base_url: Option<Option<String>>,
    #[serde(
        rename = "api_key",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub api_key: Option<Option<String>>,
    #[serde(rename = "messages")]
    pub messages: Vec<models::ChatMessageSchema>,
}

impl CompletionRequest {
    pub fn new(
        provider: String,
        model: String,
        messages: Vec<models::ChatMessageSchema>,
    ) -> CompletionRequest {
        CompletionRequest {
            provider,
            model,
            base_url: None,
            api_key: None,
            messages,
        }
    }
}
