/*
 * Corpora API
 *
 * API for managing and processing corpora
 *
 * The version of the OpenAPI document: 0.1.0
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ProjectIn {
    #[serde(rename = "title")]
    pub title: String,
    #[serde(
        rename = "subtitle",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub subtitle: Option<Option<String>>,
    #[serde(
        rename = "purpose",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub purpose: Option<Option<String>>,
    #[serde(
        rename = "author",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub author: Option<Option<String>>,
    #[serde(
        rename = "publisher",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub publisher: Option<Option<String>>,
    #[serde(
        rename = "isbn",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub isbn: Option<Option<String>>,
    #[serde(
        rename = "language",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub language: Option<Option<String>>,
    #[serde(
        rename = "publication_date",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub publication_date: Option<Option<String>>,
    #[serde(
        rename = "instructions",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub instructions: Option<Option<String>>,
    #[serde(
        rename = "voice",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub voice: Option<Option<String>>,
    #[serde(rename = "has_images", skip_serializing_if = "Option::is_none")]
    pub has_images: Option<bool>,
}

impl ProjectIn {
    pub fn new(title: String) -> ProjectIn {
        ProjectIn {
            title,
            subtitle: None,
            purpose: None,
            author: None,
            publisher: None,
            isbn: None,
            language: None,
            publication_date: None,
            instructions: None,
            voice: None,
            has_images: None,
        }
    }
}
