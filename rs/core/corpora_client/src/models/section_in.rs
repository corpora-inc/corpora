/*
 * Corpora API
 *
 * API for managing and processing corpora
 *
 * The version of the OpenAPI document: 0.1.0
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct SectionIn {
    #[serde(rename = "title")]
    pub title: String,
    #[serde(
        rename = "introduction",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub introduction: Option<Option<String>>,
    #[serde(
        rename = "instructions",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub instructions: Option<Option<String>>,
    #[serde(
        rename = "order",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub order: Option<Option<i32>>,
}

impl SectionIn {
    pub fn new(title: String) -> SectionIn {
        SectionIn {
            title,
            introduction: None,
            instructions: None,
            order: None,
        }
    }
}
