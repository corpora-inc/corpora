/*
 * Corpora API
 *
 * API for managing and processing corpora
 *
 * The version of the OpenAPI document: 0.1.0
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct SubsectionOut {
    #[serde(rename = "title")]
    pub title: String,
    #[serde(
        rename = "content",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub content: Option<Option<String>>,
    #[serde(
        rename = "instructions",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub instructions: Option<Option<String>>,
    #[serde(
        rename = "order",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub order: Option<Option<i32>>,
    #[serde(rename = "id")]
    pub id: uuid::Uuid,
    #[serde(rename = "section_id")]
    pub section_id: uuid::Uuid,
    #[serde(rename = "created_at")]
    pub created_at: String,
    #[serde(rename = "updated_at")]
    pub updated_at: String,
}

impl SubsectionOut {
    pub fn new(
        title: String,
        id: uuid::Uuid,
        section_id: uuid::Uuid,
        created_at: String,
        updated_at: String,
    ) -> SubsectionOut {
        SubsectionOut {
            title,
            content: None,
            instructions: None,
            order: None,
            id,
            section_id,
            created_at,
            updated_at,
        }
    }
}
