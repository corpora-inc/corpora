/*
 * Corpora API
 *
 * API for managing and processing corpora
 *
 * The version of the OpenAPI document: 0.1.0
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct GenericCompletionRequest {
    #[serde(rename = "provider")]
    pub provider: String,
    #[serde(rename = "config")]
    pub config: std::collections::HashMap<String, serde_json::Value>,
    #[serde(rename = "messages")]
    pub messages: Vec<models::ChatCompletionTextMessage>,
    #[serde(rename = "fields_schema")]
    pub fields_schema: std::collections::HashMap<String, String>,
}

impl GenericCompletionRequest {
    pub fn new(
        provider: String,
        config: std::collections::HashMap<String, serde_json::Value>,
        messages: Vec<models::ChatCompletionTextMessage>,
        fields_schema: std::collections::HashMap<String, String>,
    ) -> GenericCompletionRequest {
        GenericCompletionRequest {
            provider,
            config,
            messages,
            fields_schema,
        }
    }
}
