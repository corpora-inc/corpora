/*
 * Corpora API
 *
 * API for managing and processing corpora
 *
 * The version of the OpenAPI document: 0.1.0
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct SplitVectorSearchSchema {
    #[serde(rename = "corpus_id")]
    pub corpus_id: uuid::Uuid,
    #[serde(rename = "text")]
    pub text: String,
    #[serde(rename = "limit", skip_serializing_if = "Option::is_none")]
    pub limit: Option<i32>,
}

impl SplitVectorSearchSchema {
    pub fn new(corpus_id: uuid::Uuid, text: String) -> SplitVectorSearchSchema {
        SplitVectorSearchSchema {
            corpus_id,
            text,
            limit: None,
        }
    }
}
