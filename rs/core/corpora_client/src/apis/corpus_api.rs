/*
 * Corpora API
 *
 * API for managing and processing corpora
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use std::sync::Arc;
use std::borrow::Borrow;
use std::pin::Pin;
#[allow(unused_imports)]
use std::option::Option;

use hyper;
use hyper_util::client::legacy::connect::Connect;
use futures::Future;

use crate::models;
use super::{Error, configuration};
use super::request as __internal_request;

pub struct CorpusApiClient<C: Connect>
    where C: Clone + std::marker::Send + Sync + 'static {
    configuration: Arc<configuration::Configuration<C>>,
}

impl<C: Connect> CorpusApiClient<C>
    where C: Clone + std::marker::Send + Sync {
    pub fn new(configuration: Arc<configuration::Configuration<C>>) -> CorpusApiClient<C> {
        CorpusApiClient {
            configuration,
        }
    }
}

pub trait CorpusApi: Send + Sync {
    fn create_corpus(&self, name: &str, tarball: std::path::PathBuf, url: Option<&str>) -> Pin<Box<dyn Future<Output = Result<models::CorpusResponseSchema, Error>> + Send>>;
    fn delete_corpus(&self, corpus_name: &str) -> Pin<Box<dyn Future<Output = Result<String, Error>> + Send>>;
    fn get_corpus(&self, corpus_id: &str) -> Pin<Box<dyn Future<Output = Result<models::CorpusResponseSchema, Error>> + Send>>;
    fn get_file_hashes(&self, corpus_id: &str) -> Pin<Box<dyn Future<Output = Result<std::collections::HashMap<String, String>, Error>> + Send>>;
    fn list_corpora(&self, ) -> Pin<Box<dyn Future<Output = Result<Vec<models::CorpusResponseSchema>, Error>> + Send>>;
    fn update_files(&self, corpus_id: &str, tarball: std::path::PathBuf, delete_files: Option<Vec<String>>) -> Pin<Box<dyn Future<Output = Result<String, Error>> + Send>>;
}

impl<C: Connect>CorpusApi for CorpusApiClient<C>
    where C: Clone + std::marker::Send + Sync {
    #[allow(unused_mut)]
    fn create_corpus(&self, name: &str, tarball: std::path::PathBuf, url: Option<&str>) -> Pin<Box<dyn Future<Output = Result<models::CorpusResponseSchema, Error>> + Send>> {
        let mut req = __internal_request::Request::new(hyper::Method::POST, "/api/corpora/corpus".to_string())
        ;
        req = req.with_form_param("name".to_string(), name.to_string());
        if let Some(param_value) = url {
            req = req.with_form_param("url".to_string(), param_value.to_string());
        }
        req = req.with_form_param("tarball".to_string(), unimplemented!());

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn delete_corpus(&self, corpus_name: &str) -> Pin<Box<dyn Future<Output = Result<String, Error>> + Send>> {
        let mut req = __internal_request::Request::new(hyper::Method::DELETE, "/api/corpora/corpus".to_string())
        ;
        req = req.with_query_param("corpus_name".to_string(), corpus_name.to_string());

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn get_corpus(&self, corpus_id: &str) -> Pin<Box<dyn Future<Output = Result<models::CorpusResponseSchema, Error>> + Send>> {
        let mut req = __internal_request::Request::new(hyper::Method::GET, "/api/corpora/corpus/{corpus_id}".to_string())
        ;
        req = req.with_path_param("corpus_id".to_string(), corpus_id.to_string());

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn get_file_hashes(&self, corpus_id: &str) -> Pin<Box<dyn Future<Output = Result<std::collections::HashMap<String, String>, Error>> + Send>> {
        let mut req = __internal_request::Request::new(hyper::Method::GET, "/api/corpora/corpus/{corpus_id}/files".to_string())
        ;
        req = req.with_path_param("corpus_id".to_string(), corpus_id.to_string());

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn list_corpora(&self, ) -> Pin<Box<dyn Future<Output = Result<Vec<models::CorpusResponseSchema>, Error>> + Send>> {
        let mut req = __internal_request::Request::new(hyper::Method::GET, "/api/corpora/corpus".to_string())
        ;

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn update_files(&self, corpus_id: &str, tarball: std::path::PathBuf, delete_files: Option<Vec<String>>) -> Pin<Box<dyn Future<Output = Result<String, Error>> + Send>> {
        let mut req = __internal_request::Request::new(hyper::Method::POST, "/api/corpora/corpus/{corpus_id}/files".to_string())
        ;
        req = req.with_path_param("corpus_id".to_string(), corpus_id.to_string());
        if let Some(param_value) = delete_files {
            req = req.with_form_param("delete_files".to_string(), param_value.join(",").to_string());
        }
        req = req.with_form_param("tarball".to_string(), unimplemented!());

        req.execute(self.configuration.borrow())
    }

}
