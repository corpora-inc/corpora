/*
 * Corpora API
 *
 * API for managing and processing corpora
 *
 * The version of the OpenAPI document: 0.1.0
 *
 * Generated by: https://openapi-generator.tech
 */

use std::borrow::Borrow;
#[allow(unused_imports)]
use std::option::Option;
use std::pin::Pin;
use std::sync::Arc;

use futures::Future;
use hyper;
use hyper_util::client::legacy::connect::Connect;

use super::request as __internal_request;
use super::{configuration, Error};
use crate::models;

pub struct WorkonApiClient<C: Connect>
where
    C: Clone + std::marker::Send + Sync + 'static,
{
    configuration: Arc<configuration::Configuration<C>>,
}

impl<C: Connect> WorkonApiClient<C>
where
    C: Clone + std::marker::Send + Sync,
{
    pub fn new(configuration: Arc<configuration::Configuration<C>>) -> WorkonApiClient<C> {
        WorkonApiClient { configuration }
    }
}

pub trait WorkonApi: Send + Sync {
    fn file(
        &self,
        corpus_file_chat_schema: models::CorpusFileChatSchema,
    ) -> Pin<Box<dyn Future<Output = Result<String, Error>> + Send>>;
}

impl<C: Connect> WorkonApi for WorkonApiClient<C>
where
    C: Clone + std::marker::Send + Sync,
{
    #[allow(unused_mut)]
    fn file(
        &self,
        corpus_file_chat_schema: models::CorpusFileChatSchema,
    ) -> Pin<Box<dyn Future<Output = Result<String, Error>> + Send>> {
        let mut req = __internal_request::Request::new(
            hyper::Method::POST,
            "/api/corpora/workon/file".to_string(),
        );
        req = req.with_body_param(corpus_file_chat_schema);

        req.execute(self.configuration.borrow())
    }
}
