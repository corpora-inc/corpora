/*
 * Corpora API
 *
 * API for managing and processing corpora
 *
 * The version of the OpenAPI document: 0.1.0
 *
 * Generated by: https://openapi-generator.tech
 */

use std::borrow::Borrow;
#[allow(unused_imports)]
use std::option::Option;
use std::pin::Pin;
use std::sync::Arc;

use futures::Future;
use hyper;
use hyper_util::client::legacy::connect::Connect;

use super::request as __internal_request;
use super::{configuration, Error};
use crate::models;

pub struct FileApiClient<C: Connect>
where
    C: Clone + std::marker::Send + Sync + 'static,
{
    configuration: Arc<configuration::Configuration<C>>,
}

impl<C: Connect> FileApiClient<C>
where
    C: Clone + std::marker::Send + Sync,
{
    pub fn new(configuration: Arc<configuration::Configuration<C>>) -> FileApiClient<C> {
        FileApiClient { configuration }
    }
}

pub trait FileApi: Send + Sync {
    fn create_file(
        &self,
        file_schema: models::FileSchema,
    ) -> Pin<Box<dyn Future<Output = Result<models::FileResponseSchema, Error>> + Send>>;
    fn get_file(
        &self,
        file_id: &str,
    ) -> Pin<Box<dyn Future<Output = Result<models::FileResponseSchema, Error>> + Send>>;
    fn get_file_by_path(
        &self,
        corpus_id: &str,
        path: &str,
    ) -> Pin<Box<dyn Future<Output = Result<models::FileResponseSchema, Error>> + Send>>;
}

impl<C: Connect> FileApi for FileApiClient<C>
where
    C: Clone + std::marker::Send + Sync,
{
    #[allow(unused_mut)]
    fn create_file(
        &self,
        file_schema: models::FileSchema,
    ) -> Pin<Box<dyn Future<Output = Result<models::FileResponseSchema, Error>> + Send>> {
        let mut req =
            __internal_request::Request::new(hyper::Method::POST, "/api/corpora/file".to_string());
        req = req.with_body_param(file_schema);

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn get_file(
        &self,
        file_id: &str,
    ) -> Pin<Box<dyn Future<Output = Result<models::FileResponseSchema, Error>> + Send>> {
        let mut req = __internal_request::Request::new(
            hyper::Method::GET,
            "/api/corpora/file/{file_id}".to_string(),
        );
        req = req.with_path_param("file_id".to_string(), file_id.to_string());

        req.execute(self.configuration.borrow())
    }

    #[allow(unused_mut)]
    fn get_file_by_path(
        &self,
        corpus_id: &str,
        path: &str,
    ) -> Pin<Box<dyn Future<Output = Result<models::FileResponseSchema, Error>> + Send>> {
        let mut req = __internal_request::Request::new(
            hyper::Method::GET,
            "/api/corpora/file/corpus/{corpus_id}".to_string(),
        );
        req = req.with_query_param("path".to_string(), path.to_string());
        req = req.with_path_param("corpus_id".to_string(), corpus_id.to_string());

        req.execute(self.configuration.borrow())
    }
}
